(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    427192,       8134]
NotebookOptionsPosition[    415739,       7928]
NotebookOutlinePosition[    416132,       7944]
CellTagsIndexPosition[    416089,       7941]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"$HistoryLength", "=", "0"}], ";"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[172]:=",ExpressionUUID->"89bcda9b-2730-4109-a749-4176f91f8294"],

Cell[CellGroupData[{

Cell["Initialization", "Section",ExpressionUUID->"7ab1eff3-434c-4783-a7db-0c12a26115b8"],

Cell[CellGroupData[{

Cell["Paths", "Subsection",
 InitializationCell->
  True,ExpressionUUID->"a3596cef-c494-4575-a82d-ac4a520b086d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"projectDirectory", "=", 
   RowBox[{"ExpandFileName", "@", "\"\<~/Documents/unireps\>\""}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[1]:=",ExpressionUUID->"555a3be7-6006-4e97-8142-e2b9158ffea0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"datasetsDirectory", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"projectDirectory", ",", "\"\<datasets\>\""}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"outputsDirectory", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"projectDirectory", ",", "\"\<outputs\>\""}], "}"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellLabel->"In[2]:=",ExpressionUUID->"67acdb23-2b8a-401b-ac0c-18b18d0829a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Python", "Subsection",
 InitializationCell->
  True,ExpressionUUID->"69bcd4c7-5c41-46ad-9456-c19e7370ec79"],

Cell[BoxData[
 RowBox[{
  RowBox[{"py", "=", 
   RowBox[{"StartExternalSession", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Python\>\"", ",", 
      RowBox[{"\"\<Evaluator\>\"", "->", 
       RowBox[{"<|", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<EnvironmentName\>\"", "->", "\"\<unireps\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<PythonRuntime\>\"", "->", "\"\<3.11\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Dependencies\>\"", "->", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
           "\"\<torch\>\"", ",", "\[IndentingNewLine]", "\"\<datasets\>\"", 
            ",", "\[IndentingNewLine]", "\"\<transformers\>\"", ",", 
            "\[IndentingNewLine]", "\"\<matplotlib\>\"", ",", 
            "\[IndentingNewLine]", "\"\<numpy\>\""}], "\[IndentingNewLine]", 
           "}"}]}]}], "\[IndentingNewLine]", "|>"}]}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[27]:=",ExpressionUUID->"175c3f28-e36b-4c7c-93c8-713d86a3786e"],

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{
  "py", ",", 
   "\"\<\nimport torch\nimport datasets\nimport numpy as np\n\nimport sys\n\
sys.path.append(<* ParentDirectory@NotebookDirectory[] *>)\nimport unireps\n\
\>\""}], "]"}]], "Input",
 InitializationCell->True,
 CellLabel->"In[28]:=",ExpressionUUID->"8ef1d8b6-8d95-40de-b561-982734641cfe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Importing embeddings", "Section",ExpressionUUID->"234e26c7-07cf-47f0-84a4-60ae854f1070"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDatasetName", "[", 
   RowBox[{"{", 
    RowBox[{"model_", ",", "dataset_", ",", 
     RowBox[{"chat_", ":", "False"}]}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"StringReplace", "[", 
    RowBox[{"model", ",", 
     RowBox[{"\"\</\>\"", "->", "\"\<__\>\""}]}], "]"}], "<>", "\"\<---\>\"", 
   "<>", "dataset", "<>", 
   RowBox[{"If", "[", 
    RowBox[{"chat", ",", "\"\<--chat\>\"", ",", "\"\<\>\""}], 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[107]:=",ExpressionUUID->"c46390ed-50ce-4566-8bfe-169abb7e21b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDatasetPath", "[", "output_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{"outputsDirectory", ",", 
     RowBox[{"getDatasetName", "[", "output", "]"}]}], "}"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[112]:=",ExpressionUUID->"e8a9f2ba-fc97-4c9a-abac-d21a3957b1eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDataset", "[", "output_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"ExternalEvaluate", "[", "\[IndentingNewLine]", 
   RowBox[{"py", ",", "\[IndentingNewLine]", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Command\>\"", "->", 
       RowBox[{
        RowBox[{
        "StringTemplate", "[", "\"\<datasets.load_from_disk('``')\>\"", "]"}],
         "[", 
        RowBox[{"getDatasetPath", "[", "output", "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<ReturnType\>\"", "->", "\"\<ExternalObject\>\""}]}], 
     "\[IndentingNewLine]", "|>"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellLabel->
  "In[113]:=",ExpressionUUID->"ff3b83c6-9025-4e06-8803-4e97e43d7c63"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDatasetTexts", "[", "output_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"ExternalEvaluate", "[", "\[IndentingNewLine]", 
   RowBox[{"py", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "StringTemplate", "[", "\"\<datasets.load_from_disk('``')['text']\>\"", 
      "]"}], "[", 
     RowBox[{"getDatasetPath", "[", "output", "]"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[117]:=",ExpressionUUID->"4e93ad8b-1ad6-44b5-b8ee-f9a879b87e2f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDatasetTruncation", "[", "output_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"ExternalEvaluate", "[", "\[IndentingNewLine]", 
   RowBox[{"py", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "StringTemplate", "[", 
      "\"\<[b.item() for b in datasets.load_from_disk('``')['at_max_length']]\
\>\"", "]"}], "[", 
     RowBox[{"getDatasetPath", "[", "output", "]"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[165]:=",ExpressionUUID->"1dda1534-9de9-40c2-94aa-42a674012671"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getDatasetEmbeddings", "[", 
   RowBox[{"output_", ",", 
    RowBox[{"layer_", ":", "All"}], ",", 
    RowBox[{"agg_", ":", "\"\<Last\>\""}], ",", 
    RowBox[{"normalize_", ":", "True"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"ExternalEvaluate", "[", "\[IndentingNewLine]", 
   RowBox[{"py", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "StringTemplate", "[", "\[IndentingNewLine]", 
      "\"\<np.array(unireps.dataset_embs(datasets.load_from_disk('``'), \
layer=``, agg='``', normalize=``))\>\"", "\[IndentingNewLine]", "]"}], "[", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"getDatasetPath", "[", "output", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Replace", "[", 
       RowBox[{"layer", ",", 
        RowBox[{"All", "->", "\"\<None\>\""}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Replace", "[", 
       RowBox[{"agg", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Last\>\"", "->", "\"\<last\>\""}], ",", 
          RowBox[{"\"\<Mean\>\"", "->", "\"\<mean\>\""}]}], "}"}]}], "]"}], 
      ",", "\[IndentingNewLine]", "normalize"}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[164]:=",ExpressionUUID->"6feaf024-f7bf-42ae-9fb6-6796de93de8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Similarity measures", "Section",ExpressionUUID->"729c0de3-80af-4fa4-bb33-c225975f29fc"],

Cell[CellGroupData[{

Cell["Mutual k-NN", "Subsection",ExpressionUUID->"2add89f7-bbc4-49a4-8911-41a4eac5cdf0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getKNN", "[", 
    RowBox[{"embs_", ",", "k_"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"ArrayDepth", "[", "embs", "]"}], "===", "2"}]}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"e", "|->", 
     RowBox[{"Ordering", "[", 
      RowBox[{"e", ",", 
       RowBox[{"-", "k"}]}], "]"}]}], ",", 
    RowBox[{
     RowBox[{"embs", ".", 
      RowBox[{"Transpose", "[", "embs", "]"}]}], "-", 
     RowBox[{"Normal", "[", 
      RowBox[{"999999", "*", 
       RowBox[{"IdentityMatrix", "[", 
        RowBox[{"Length", "[", "embs", "]"}], "]"}]}], "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"getKNN", "[", 
    RowBox[{"embs_", ",", "k_"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"ArrayDepth", "[", "embs", "]"}], "===", "3"}]}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"getKNN", "[", 
     RowBox[{"#", ",", "k"}], "]"}], "&"}], "/@", "embs"}]}]}], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"a86a56d1-fa71-402f-8d1f-8890c91a71ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"knn1", "=", 
    RowBox[{"getKNN", "[", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"getDatasetEmbeddings", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<google/gemma-2-9b\>\"", ",", "\"\<web_text\>\""}], 
         "}"}], "]"}]}], ",", "10"}], "]"}]}], ";"}], "//", 
  "EchoTiming"}]], "Input",
 CellLabel->
  "In[275]:=",ExpressionUUID->"18215c2f-e803-4850-a01b-9a2ade5ca606"],

Cell[BoxData["18.87477`"], "EchoTiming",ExpressionUUID->"00860368-ebe9-4dd8-b03e-8e156f3a5e78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getDatasetEmbeddings", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<meta-llama/Meta-Llama-3.1-8B\>\"", ",", "\"\<web_text\>\""}], 
   "}"}], "]"}]], "Input",
 CellLabel->
  "In[325]:=",ExpressionUUID->"53a0beab-f2a6-4ec3-bd35-fb4b21c7a2a5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a  directory nor a  directory.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a  directory nor a  directory.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"FileNotFoundError\"", HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"FileNotFoundError\"", "\" \"", 
                    "\"Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory.\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"FileNotFoundError\"", "\" \"", 
                    "\"Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory.\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x106430ae0>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x106404bb0>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=10 \
objects=4>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x1057c8d60>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory.\""}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x106430ae0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106404bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=10 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x1057c8d60>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x106430ae0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106404bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=10 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x1057c8d60>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 412.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 413.  \""}, {"\" 414.      def send_side_effect(self, expr):\""}, {
                    "\" 415.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 416.  \""}, {"\" 417.  \""}, {
                    "\" 418.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 420.  \""}, {
                    "\" 421.      sys.stdout.flush()\""}, {
                    "\" 422.      return result\""}, {"\" 423.  \""}, {
                    "\" 424.  \""}, {
                    
                    "\" 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x106404bb0>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106404bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 412.          self.socket.send(zmq.Frame(bytes))", 
                    " 413.  ", " 414.      def send_side_effect(self, expr):",
                     " 415.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 416.  ", " 417.  ", 
                    " 418.  def handle_message(socket, consumer):", 
                    Item[
                    " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 420.  ", 
                    " 421.      sys.stdout.flush()", 
                    " 422.      return result", " 423.  ", " 424.  ", 
                    " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x106404bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.py\
\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.py\
\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.01np.array(unireps.dataset_embs(datasets.\
load_from_disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-\
Llama-3.1-8B---web_text'), layer=None, agg='last', \
normalize=True))A\.00S\\nExpression\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1150dbfd0>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.01np.array(unireps.dataset_embs(datasets.\
load_from_disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-\
Llama-3.1-8B---web_text'), layer=None, agg='last', normalize=True))A\.00S\n\
Expression"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1150dbfd0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.01np.array(unireps.dataset_embs(datasets.\
load_from_disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-\
Llama-3.1-8B---web_text'), layer=None, agg='last', normalize=True))A\.00S\n\
Expression"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1150dbfd0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x12171a140>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=10 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 381.  \""}, {
                    "\" 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 383.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 384.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 386.  \""}, {
                    "\" 387.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 388.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 389.  \""}, {
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x12173d080>, <generator object WXFParser.tokens at \
0x12171a140>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x12173d080>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{" 381.  ", 
                    " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 383.          self.objects_registry = \
registry(objects_registry)", 
                    " 384.          self.globals_registry = \
registry(globals_registry)", 
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                    " 394.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x12173d080>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x12171a140>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x12134d080>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x12171a140>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x12134d080>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x12134d080>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x12171a140>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=10 objects=4>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 386.  \""}, {
                    "\" 387.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 388.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 389.  \""}, {
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    ItemBox[
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}, {"\" 395.  \""}, {
                    "\" 396.      def dispatch_wl_object(self, route, *args):\
\""}, {"\" 397.          return self.routes_registry[route](self, *args)\""}, \
{"\" 398.  \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x121796d90>, <generator object WXFParser.tokens at \
0x12171a140>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Eval'\
, \\\"np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/\
christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_\
text'), layer=None, agg='last', normalize=True))\\\", {}]\""}, {
                    "\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x121796d90>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
\"np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))\", {}]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):",
                     " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    Item[
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                    " 394.          return expr", " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x121796d90>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {"expr", 
                    
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
\"np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))\", {}]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dispatch_wl_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dispatch_wl_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}, {"\" 395.  \""}, {
                    "\" 396.      def dispatch_wl_object(self, route, *args):\
\""}, {
                    ItemBox[
                    "\" 397.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 398.  \""}, {"\" 399.      def __repr__(self):\""}, {
                    "\" 400.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 402.          )\""}, {"\" 403.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"route\"", "\"Eval\""}, {"\"args\"", 
                    "\"(\\\"np.array(unireps.dataset_embs(datasets.load_from_\
disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-\
8B---web_text'), layer=None, agg='last', normalize=True))\\\", {})\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "route", "Eval"}, {"args", 
                    "(\"np.array(unireps.dataset_embs(datasets.load_from_disk(\
'/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))\", {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                     " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                    " 399.      def __repr__(self):", 
                    " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                    " 403.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "route", "Eval"}, {"args", 
                    "(\"np.array(unireps.dataset_embs(datasets.load_from_disk(\
'/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))\", {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"Eval\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"Eval\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 222.      if isinstance(last_expr, ast.Expr):\""}, {
                    "\" 223.          result = expressions.pop(-1)\""}, {
                    "\" 224.  \""}, {"\" 225.      if expressions:\""}, {
                    "\" 226.          exec(compile(Module(expressions), \
\\\"\\\", \\\"exec\\\"), env)\""}, {"\" 227.  \""}, {
                    "\" 228.      if result:\""}, {
                    ItemBox[
                    "\" 229.          return \
eval(compile(ast.Expression(result.value), \\\"\\\", \\\"eval\\\"), env)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 230.  \""}, {
                    "\" 231.      elif isinstance(last_expr, \
(ast.FunctionDef, ast.ClassDef)):\""}, {
                    "\" 232.          return env[last_expr.name]\""}, {
                    "\" 233.  \""}, {"\" 234.  \""}, {
                    "\" 235.  @routes.register_function\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=10 objects=4>\""}, {
                    "\"code\"", 
                    "\"np.array(unireps.dataset_embs(datasets.load_from_disk('\
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))\""}, {"\"constants\"", 
                    "\"{}\""}, {"\"env\"", "\"<registry len=10>\""}, {
                    "\"result\"", "\"<ast.Expr object at 0x12178efe0>\""}, {
                    "\"expressions\"", "\"[]\""}, {"\"last_expr\"", 
                    "\"<ast.Expr object at 0x12178efe0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "code", 
                    "np.array(unireps.dataset_embs(datasets.load_from_disk('/\
Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))"}, {"constants", "{}"}, {
                    "env", "<registry len=10>"}, {"result", 
                    "<ast.Expr object at 0x12178efe0>"}, {
                    "expressions", "[]"}, {"last_expr", 
                    "<ast.Expr object at 0x12178efe0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "Eval"}], 
                    Column[{
                    
                    Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                    " 223.          result = expressions.pop(-1)", " 224.  ", 
                    " 225.      if expressions:", 
                    " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                    Item[
                    " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                    LightYellow], " 230.  ", 
                    " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                    " 234.  ", " 235.  @routes.register_function"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "code", 
                    "np.array(unireps.dataset_embs(datasets.load_from_disk('/\
Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))"}, {"constants", "{}"}, {
                    "env", "<registry len=10>"}, {
                    "result", "<ast.Expr object at 0x12178efe0>"}, {
                    "expressions", "[]"}, {"last_expr", 
                    "<ast.Expr object at 0x12178efe0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    "\"   1.  \
np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wl_expr_1\"", 
                    "\"FileNameJoin[('/Users/christopher/Documents/unireps/\
datasets', StringJoin[Global`model, '--', Global`dataset, If[Global`chat, \
'--chat', '']])]\""}, {"\"torch\"", 
                    "\"<module 'torch' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/torch/__init__.py'>\""}, {
                    "\"datasets\"", 
                    "\"<module 'datasets' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/datasets/__init__.py'>\""}, {
                    "\"np\"", 
                    "\"<module 'numpy' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/lib/python3.11/site-packages/numpy/__init__.py'>\""}, {
                    "\"sys\"", "\"<module 'sys' (built-in)>\""}, {
                    "\"unireps\"", 
                    "\"<module 'unireps' from \
'/Users/christopher/git/unireps/unireps/__init__.py'>\""}, {
                    "\"__warningregistry__\"", "\"{'version': 130}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wl_expr_1", 
                    "FileNameJoin[('/Users/christopher/Documents/unireps/\
datasets', StringJoin[Global`model, '--', Global`dataset, If[Global`chat, \
'--chat', '']])]"}, {"torch", 
                    "<module 'torch' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/torch/__init__.py'>"}, {
                    "datasets", 
                    "<module 'datasets' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/datasets/__init__.py'>"}, {
                    "np", "<module 'numpy' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/lib/python3.11/site-packages/numpy/__init__.py'>"}, {
                    "sys", "<module 'sys' (built-in)>"}, {
                    "unireps", 
                    "<module 'unireps' from \
'/Users/christopher/git/unireps/unireps/__init__.py'>"}, {
                    "__warningregistry__", "{'version': 130}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  \
np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wl_expr_1", 
                    "FileNameJoin[('/Users/christopher/Documents/unireps/\
datasets', StringJoin[Global`model, '--', Global`dataset, If[Global`chat, \
'--chat', '']])]"}, {"torch", 
                    "<module 'torch' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/torch/__init__.py'>"}, {
                    "datasets", 
                    "<module 'datasets' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/datasets/__init__.py'>"}, {
                    "np", "<module 'numpy' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/lib/python3.11/site-packages/numpy/__init__.py'>"}, {
                    "sys", "<module 'sys' (built-in)>"}, {
                    "unireps", 
                    "<module 'unireps' from \
'/Users/christopher/git/unireps/unireps/__init__.py'>"}, {
                    "__warningregistry__", "{'version': 130}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"], 
                    SystemOpen[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"load_from_disk\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"], 
                    SystemOpen[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"load_from_disk\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"2208.      if fs.isfile(posixpath.join(dataset_path, \
config.DATASET_INFO_FILENAME)) and fs.isfile(\""}, {
                    "\"2209.          posixpath.join(dataset_path, \
config.DATASET_STATE_JSON_FILENAME)\""}, {"\"2210.      ):\""}, {
                    "\"2211.          return \
Dataset.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)\""}, {
                    "\"2212.      elif fs.isfile(posixpath.join(dataset_path, \
config.DATASETDICT_JSON_FILENAME)):\""}, {
                    "\"2213.          return \
DatasetDict.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)\""}, {"\"2214.      else:\""}, {
                    ItemBox[
                    "\"2215.          raise FileNotFoundError(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"2216.              f\\\"Directory {dataset_path} is \
neither a `Dataset` directory nor a `DatasetDict` directory.\\\"\""}, {
                    "\"2217.          )\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"dataset_path\"", 
                    "\"/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text\""}, {"\"keep_in_memory\"", "\"None\""}, {
                    "\"storage_options\"", "\"None\""}, {"\"fs\"", 
                    "\"<fsspec.implementations.local.LocalFileSystem object \
at 0x12138bf90>\""}, {"\"_\"", 
                    "\"['/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text']\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"dataset_path", 
                    "/Users/christopher/Documents/unireps/outputs/meta-llama__\
Meta-Llama-3.1-8B---web_text"}, {"keep_in_memory", "None"}, {
                    "storage_options", "None"}, {"fs", 
                    "<fsspec.implementations.local.LocalFileSystem object at \
0x12138bf90>"}, {"_", 
                    "['/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text']"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"], 
                    SystemOpen[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"]], Appearance -> "Frameless"], " in ", "load_from_disk"}], 
                    Column[{
                    
                    Column[{
                    "2208.      if fs.isfile(posixpath.join(dataset_path, \
config.DATASET_INFO_FILENAME)) and fs.isfile(", 
                    "2209.          posixpath.join(dataset_path, \
config.DATASET_STATE_JSON_FILENAME)", "2210.      ):", 
                    "2211.          return \
Dataset.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)", 
                    "2212.      elif fs.isfile(posixpath.join(dataset_path, \
config.DATASETDICT_JSON_FILENAME)):", 
                    "2213.          return \
DatasetDict.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)", "2214.      else:", 
                    Item[
                    "2215.          raise FileNotFoundError(", Background -> 
                    LightYellow], 
                    "2216.              f\"Directory {dataset_path} is \
neither a `Dataset` directory nor a `DatasetDict` directory.\"", 
                    "2217.          )"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"dataset_path", 
                    "/Users/christopher/Documents/unireps/outputs/meta-llama__\
Meta-Llama-3.1-8B---web_text"}, {"keep_in_memory", "None"}, {
                    "storage_options", "None"}, {
                    "fs", "<fsspec.implementations.local.LocalFileSystem \
object at 0x12138bf90>"}, {"_", 
                    "['/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text']"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, True]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"FileNotFoundError", " ", 
                    "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x106430ae0>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x106404bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=10 \
objects=4>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x1057c8d60>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", 
                    "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 412.          self.socket.send(zmq.Frame(bytes))", 
                    " 413.  ", " 414.      def send_side_effect(self, expr):",
                     " 415.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 416.  ", " 417.  ", 
                    " 418.  def handle_message(socket, consumer):", 
                    Item[
                    " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 420.  ", 
                    " 421.      sys.stdout.flush()", 
                    " 422.      return result", " 423.  ", " 424.  ", 
                    " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x106404bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.01np.array(unireps.dataset_embs(datasets.\
load_from_disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-\
Llama-3.1-8B---web_text'), layer=None, agg='last', normalize=True))A\.00S\n\
Expression"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1150dbfd0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{" 381.  ", 
                    " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 383.          self.objects_registry = \
registry(objects_registry)", 
                    " 384.          self.globals_registry = \
registry(globals_registry)", 
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                    " 394.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x12173d080>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x12134d080>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x12171a140>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):",
                     " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    Item[
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                    " 394.          return expr", " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x121796d90>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
\"np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))\", {}]"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                     " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                    " 399.      def __repr__(self):", 
                    " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                    " 403.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "route", "Eval"}, {
                    "args", 
                    "(\"np.array(unireps.dataset_embs(datasets.load_from_disk(\
'/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))\", {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "Eval"}], 
                    Column[{
                    
                    Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                    " 223.          result = expressions.pop(-1)", " 224.  ", 
                    " 225.      if expressions:", 
                    " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                    Item[
                    " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                    LightYellow], " 230.  ", 
                    " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                    " 234.  ", " 235.  @routes.register_function"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                    "code", 
                    "np.array(unireps.dataset_embs(datasets.load_from_disk('/\
Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))"}, {"constants", "{}"}, {
                    "env", "<registry len=10>"}, {
                    "result", "<ast.Expr object at 0x12178efe0>"}, {
                    "expressions", "[]"}, {
                    "last_expr", "<ast.Expr object at 0x12178efe0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  \
np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wl_expr_1", 
                    "FileNameJoin[('/Users/christopher/Documents/unireps/\
datasets', StringJoin[Global`model, '--', Global`dataset, If[Global`chat, \
'--chat', '']])]"}, {"torch", 
                    "<module 'torch' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/torch/__init__.py'>"}, {
                    "datasets", 
                    "<module 'datasets' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/datasets/__init__.py'>"}, {
                    "np", "<module 'numpy' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/lib/python3.11/site-packages/numpy/__init__.py'>"}, {
                    "sys", "<module 'sys' (built-in)>"}, {
                    "unireps", 
                    "<module 'unireps' from \
'/Users/christopher/git/unireps/unireps/__init__.py'>"}, {
                    "__warningregistry__", "{'version': 130}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"], 
                    SystemOpen[
                    "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"]], Appearance -> "Frameless"], " in ", "load_from_disk"}], 
                    Column[{
                    
                    Column[{
                    "2208.      if fs.isfile(posixpath.join(dataset_path, \
config.DATASET_INFO_FILENAME)) and fs.isfile(", 
                    "2209.          posixpath.join(dataset_path, \
config.DATASET_STATE_JSON_FILENAME)", "2210.      ):", 
                    "2211.          return \
Dataset.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)", 
                    "2212.      elif fs.isfile(posixpath.join(dataset_path, \
config.DATASETDICT_JSON_FILENAME)):", 
                    "2213.          return \
DatasetDict.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)", "2214.      else:", 
                    Item[
                    "2215.          raise FileNotFoundError(", Background -> 
                    LightYellow], 
                    "2216.              f\"Directory {dataset_path} is \
neither a `Dataset` directory nor a `DatasetDict` directory.\"", 
                    "2217.          )"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "dataset_path", 
                    "/Users/christopher/Documents/unireps/outputs/meta-llama__\
Meta-Llama-3.1-8B---web_text"}, {"keep_in_memory", "None"}, {
                    "storage_options", "None"}, {
                    "fs", "<fsspec.implementations.local.LocalFileSystem \
object at 0x12138bf90>"}, {"_", 
                    "['/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text']"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, True]}], 
                    FontFamily -> "Courier"]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ], HoldForm], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory.", 
    "MessageParameters" :> <||>, "FailureCode" :> "FileNotFoundError", 
    "Traceback" :> OpenerView[{
       Row[{
        "FileNotFoundError", " ", 
         "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"]], Appearance -> 
               "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x106430ae0>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x106404bb0>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=10 \
objects=4>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x1057c8d60>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", 
                   "Directory \
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text is neither a `Dataset` directory nor a `DatasetDict` directory."}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "handle_message"}], 
            Column[{
              
              Column[{" 412.          self.socket.send(zmq.Frame(bytes))", 
                " 413.  ", " 414.      def send_side_effect(self, expr):", 
                " 415.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 416.  ", " 417.  ", 
                " 418.  def handle_message(socket, consumer):", 
                Item[
                " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 420.  ", 
                " 421.      sys.stdout.flush()", " 422.      return result", 
                " 423.  ", " 424.  ", 
                " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x106404bb0>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py"]], 
               Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.01np.array(unireps.dataset_embs(datasets.\
load_from_disk('/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-\
Llama-3.1-8B---web_text'), layer=None, agg='last', normalize=True))A\.00S\n\
Expression"}, {"consumer", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x1150dbfd0>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x12171a140>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{" 381.  ", 
                " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 383.          self.objects_registry = \
registry(objects_registry)", 
                " 384.          self.globals_registry = \
registry(globals_registry)", 
                " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                " 387.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                " 390.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 391.              assert len(expr.args) >= 1", 
                " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                " 394.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x12173d080>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x12171a140>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x12134d080>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x12171a140>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x12171a140>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=10 objects=4>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                " 387.      def consume_function(self, *args, **kwargs):", 
                " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                " 390.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 391.              assert len(expr.args) >= 1", 
                Item[
                " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                " 394.          return expr", " 395.  ", 
                " 396.      def dispatch_wl_object(self, route, *args):", 
                " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x121796d90>, <generator object WXFParser.tokens at \
0x12171a140>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
\"np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))\", {}]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                 " 395.  ", 
                " 396.      def dispatch_wl_object(self, route, *args):", 
                Item[
                " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                " 399.      def __repr__(self):", 
                " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                " 403.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "route", "Eval"}, {
                  "args", 
                   "(\"np.array(unireps.dataset_embs(datasets.load_from_disk('\
/Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))\", {})"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "Eval"}], 
            Column[{
              
              Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                " 223.          result = expressions.pop(-1)", " 224.  ", 
                " 225.      if expressions:", 
                " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                Item[
                " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                 LightYellow], " 230.  ", 
                " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                " 234.  ", " 235.  @routes.register_function"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=10 objects=4>"}, {
                  "code", 
                   "np.array(unireps.dataset_embs(datasets.load_from_disk('/\
Users/christopher/Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---\
web_text'), layer=None, agg='last', normalize=True))"}, {"constants", "{}"}, {
                  "env", "<registry len=10>"}, {
                  "result", "<ast.Expr object at 0x12178efe0>"}, {
                  "expressions", "[]"}, {
                  "last_expr", "<ast.Expr object at 0x12178efe0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{"<module>", 
            Column[{
              Column[{
                Item[
                "   1.  \
np.array(unireps.dataset_embs(datasets.load_from_disk('/Users/christopher/\
Documents/unireps/outputs/meta-llama__Meta-Llama-3.1-8B---web_text'), \
layer=None, agg='last', normalize=True))", Background -> LightYellow]}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wl_expr_1", 
                   "FileNameJoin[('/Users/christopher/Documents/unireps/\
datasets', StringJoin[Global`model, '--', Global`dataset, If[Global`chat, \
'--chat', '']])]"}, {
                  "torch", 
                   "<module 'torch' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/torch/__init__.py'>"}, {
                  "datasets", 
                   "<module 'datasets' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Venv/unireps/lib/python3.11/site-packages/datasets/__init__.py'>"}, {
                  "np", "<module 'numpy' from \
'/Users/christopher/Library/Wolfram/ApplicationData/ExternalEvaluate/Python/\
Main/3.11/lib/python3.11/site-packages/numpy/__init__.py'>"}, {
                  "sys", "<module 'sys' (built-in)>"}, {
                  "unireps", 
                   "<module 'unireps' from \
'/Users/christopher/git/unireps/unireps/__init__.py'>"}, {
                  "__warningregistry__", "{'version': 130}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"], 
                SystemOpen[
                "/Users/christopher/Library/Wolfram/ApplicationData/\
ExternalEvaluate/Python/Venv/unireps/lib/python3.11/site-packages/datasets/\
load.py"]], Appearance -> "Frameless"], " in ", "load_from_disk"}], 
            Column[{
              
              Column[{"2208.      if fs.isfile(posixpath.join(dataset_path, \
config.DATASET_INFO_FILENAME)) and fs.isfile(", 
                "2209.          posixpath.join(dataset_path, \
config.DATASET_STATE_JSON_FILENAME)", "2210.      ):", 
                "2211.          return Dataset.load_from_disk(dataset_path, \
keep_in_memory=keep_in_memory, storage_options=storage_options)", 
                "2212.      elif fs.isfile(posixpath.join(dataset_path, \
config.DATASETDICT_JSON_FILENAME)):", 
                "2213.          return \
DatasetDict.load_from_disk(dataset_path, keep_in_memory=keep_in_memory, \
storage_options=storage_options)", "2214.      else:", 
                Item[
                "2215.          raise FileNotFoundError(", Background -> 
                 LightYellow], 
                "2216.              f\"Directory {dataset_path} is neither a \
`Dataset` directory nor a `DatasetDict` directory.\"", "2217.          )"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "dataset_path", 
                   "/Users/christopher/Documents/unireps/outputs/meta-llama__\
Meta-Llama-3.1-8B---web_text"}, {"keep_in_memory", "None"}, {
                  "storage_options", "None"}, {
                  "fs", "<fsspec.implementations.local.LocalFileSystem object \
at 0x12138bf90>"}, {
                  "_", "['/Users/christopher/Documents/unireps/outputs/meta-\
llama__Meta-Llama-3.1-8B---web_text']"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, True]}], 
        FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[325]=",ExpressionUUID->"0a7edf2c-1758-4692-82f0-501a58247266"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"knn2", "=", 
    RowBox[{"getKNN", "[", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"getDatasetEmbeddings", "[", 
        RowBox[{"{", 
         RowBox[{
         "\"\<meta-llama/Meta-Llama-3.1-8B\>\"", ",", "\"\<web_text\>\""}], 
         "}"}], "]"}]}], ",", "10"}], "]"}]}], ";"}], "//", 
  "EchoTiming"}]], "Input",
 CellLabel->
  "In[324]:=",ExpressionUUID->"b71d5c34-1165-4360-9efa-fccea16ec416"],

Cell[BoxData["0.014883`"], "EchoTiming",ExpressionUUID->"59743ffa-22b9-4f2d-8ee5-c0e6a291df89"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"knn1", "//", "Dimensions"}]], "Input",
 CellLabel->
  "In[227]:=",ExpressionUUID->"94841dbe-9622-470b-b93e-42d01fee24b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"43", ",", "2048", ",", "10"}], "}"}]], "Output",
 CellLabel->
  "Out[227]=",ExpressionUUID->"58e9a84c-b12e-4f65-9989-24acfcc3e882"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mutualKNN", "[", 
    RowBox[{"knn1_", ",", "knn2_"}], "]"}], "/;", 
   RowBox[{
    RowBox[{"ArrayDepth", "[", "knn1", "]"}], "===", 
    RowBox[{"ArrayDepth", "[", "knn2", "]"}], "===", "2"}]}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k", "=", 
      RowBox[{
       RowBox[{"Dimensions", "[", "knn1", "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Mean", "[", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{"N", "@*", "Length", "@*", "Intersection"}], ",", 
        RowBox[{"{", 
         RowBox[{"knn1", ",", "knn2"}], "}"}]}], "]"}], "]"}], "/", "k"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[235]:=",ExpressionUUID->"65703484-e7be-4c0c-b37a-41e9e507b647"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayDepth", "@", 
  RowBox[{"knn1", "[", 
   RowBox[{"[", "10", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"8b52fe20-a5fa-482d-b791-28b544f0f664"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[234]=",ExpressionUUID->"7f03b85c-c69c-4ec2-82de-af7736a51835"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"mat", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"mutualKNN", "[", 
       RowBox[{"knn1i", ",", "knn2i"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"knn1i", ",", "knn1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"knn2i", ",", "knn2"}], "}"}]}], "]"}]}], ";"}], "//", 
  "EchoTiming"}]], "Input",
 CellLabel->
  "In[277]:=",ExpressionUUID->"55ba090a-d5aa-4899-b5d5-f427e09c4785"],

Cell[BoxData["4.049734`"], "EchoTiming",ExpressionUUID->"97fc070d-8e22-4ad1-8377-afff5f0519ab"]
}, Open  ]],

Cell["PlotRange?", "Text",ExpressionUUID->"fb0b9ca3-e41b-44cf-9ea3-6e359adcd85f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"mat", ",", 
   RowBox[{"ColorFunction", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"ColorData", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<RedBlueTones\>\"", ",", "\"\<Reverse\>\""}], "}"}], 
        "]"}], "[", "#", "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ColorFunctionScaling", "->", "False"}], ",", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"BarLegend", "[", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[306]:=",ExpressionUUID->"4c234e50-91e1-4b4d-9254-a5b1bb595205"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    RasterBox[CompressedData["
1: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
OTtwSpG/cKLFb23x74LWRpbOPnMOpFNJ13bcI6GarrPc1gkxVg8DV2Jcbw9h
WXPPkaCWJZPuKNYOV7ZE79ynw4bbd4z+OJqiHhIplTJY3AFjZS7pAlfZYFMi
Yy2OulkFZa1BVxUs2i5UKP26i+8vqlzMhhVjEpMEpzQCRRPBOwx4tNRg7rxm
LlwWcx6PmNUK6fULarq2sPh+bKPvMC6qMw/tbW2FboWW+b13WSDl5EYJ4PMN
Ei+DrLF2EN+06qZKHO5b+j3i/on9QMQ8Fh7inGeAQf3vB2eBgPZZNRKFqPN2
Jg34Drri9513u+i3jISEHetrOLEUvP1meupdMhsYYht1QitIcDT9Z7zFc+J6
uYnqbTSqNi+2Z5OQ3ler+A2vN++derQc+cXonVOjXao8SDXnGofifg742hos
/5ELf6eShedCeJB2/eZzZhvuD5sCh6XK/81f2JbCg4zuP/4emJe/Zz5QKz7J
htGWubDzHuaLZw2rPZi4376WeC3bw4LF64QaKtbxYMiJmXXGmwu2T44oaaHO
8af7j65QMPT7/up+bzafL7hG9cI2xnvh8zd5EPxygdYSICHasq0yg8OCkw7B
P18jvv/bz3qpg+tb+tw569hcNgwFfAich3lgsXaq6MMiEkZbz8ltuMiGU+9J
3jDyecGYsL9izhSs61vzNM0L9eKzZ9+/OmDcZh4ROIO/d9ZPMb+KdC649+3Q
u92CvJ+5dxft1xHoamnvPIUAtZ+X7vVj3NC2AcZ4feG8mwPeqI+PsqZOXvSY
BNp+rpn200u5dL5NFnl/ise1tKcEbFkSbE37bATZzfxzYogEB+mMg4bruVCn
mnrkJ+b3rocHNkyeN3EfzSfc2v7ZbEil/Z4/k9DGjDk4G/W40q0Q57dqLCCC
Tt5MVCMhSmVvew3mI+eve5TmhzP5dfanPuL6X7GPKD81cf2J0abJjZPrevl9
wy+quHzc1sPvPTtumhkl0svvx/F25sLG35eCVJB3JC1J3Cxh1APdlT5r45s5
kDXstbUd9dMv66IVyo+7YejhrCnamRz++9QPn0iIfxU2Qz6hC1JtGiTM1nHg
WzgYe9wn4d1ylxJueCfkym9cE4l4QPu/TrlIAkX7FPR0wOCw9pxFn9mQ337j
t9vJifl/DNJX32OtUHHVsyowmgXmh2yuZ3UTsP2ETIbbkTbwDQk69biPBU/z
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
eKv3XPNNfLyVS7BZZEohPuzMWpZ2K74aKAg/kH3qbvx5HZfs0+hldxznpjDh
5dP2xw8eD271B60fDorBnfze+bs+E7dOVinfesqT+U8rdosRoNy48XUaA+yo
RjWdUB4svRMWdJWJYVKqp7YxkgGnxpMOEYE85DOKtAeeijH9hsGTObV0sDjH
XRrm8bD7pGa58DzRW/a0sCAmHRV/Grmc1ePh9DTrO7HxYtAi11d4NtBleexJ
ujw4aPpr8C6I4V5l06eoTIfDg/Ln/7VwkVo/KzFup3hUXxHGzD6dZRNZsjrG
B2TeS1Ykq1SSeX8Mh0Dzsz2oWf9VQdpPSo5Tp4+OFNxMa/oDiS6Ju8OmdIgu
TAsNtrNcw4Zhr9/p9Kj3COIwg/cc7EHOliL52osifJ4s3+TlTfj6cp92qS9H
wYP0YScyLh3usciDW3uQIK1vIZ837ln9oiSSwvSXI1sTvX69N/Ie6YHU5l93
fA+M3fKU/9gmxoQYyyvV58g5YfPROYPs94HDM4b5tkJZLlwI4Yt/Tvc4KPbt
AVMl99bRw2RdsgxSL1QTPLjtFugX04My71k6M+5z4VeQ+2X5M8JDLmV8S1jY
g8EPuvOGdnJhpbohLTdOjJidLi/CNclzX+aq3dnFQX76cFH1FxEUxn6f5C8m
+z1mHrtRtxu6G0Vuq46KQNTnvSsExwcU20NnPu6EM82y6XO5EEvHzFTnRkig
4R/r7Di/E7PldximJgkxV9qXdkAC/yPs7SaLO+B+bvPYSnMhEms1DkbZkHPx
n29+14fasHx6T8Ete4JrR4x3VbykcIars2vR7HZM+jHeYaUH4Z9y1KDdWwq/
PWKVpse34aW2hK45VwCYc54H51AI3r79aLl8GwT77rK2UnzEWnz4JD5D9OCk
W+GZqiyZb6h1FB+eAe4LNTZTUC9+mJbwtRWbhvUilx3hY7+a1eoIWwrdO1qm
f0hl4fGuYrOMEj5Kr09S/xJIyd4ffV7VJstl9hnh48rA4JbiZGrU3KugJ/Ye
DVptuDRlaKl3Px+Hrv727vhFCqZ6vpdvR7TBJ2+n8zhNst87Mv86cYfC6WSl
RRvs2rF3wyNV1wMC+LyYXhvKoPB06+MVRirteBYd3qTjIgD9du5Nj9fUqH5Z
j+LtPdsvsbDbpMf93lO+LJ/Ofh/hqecq3bCOhSjjT53vU/mYsnVRznIPCjlp
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
     "], {{0, 0}, {43, 43}}, {0, 1}], Frame -> True, 
    FrameLabel -> {None, None}, FrameTicks -> {{{{42.5, 
         FormBox["1", TraditionalForm]}, {33.5, 
         FormBox["10", TraditionalForm]}, {23.5, 
         FormBox["20", TraditionalForm]}, {13.5, 
         FormBox["30", TraditionalForm]}, {0.5, 
         FormBox["43", TraditionalForm]}}, {{42.5, 
         FormBox["1", TraditionalForm]}, {33.5, 
         FormBox["10", TraditionalForm]}, {23.5, 
         FormBox["20", TraditionalForm]}, {13.5, 
         FormBox["30", TraditionalForm]}, {0.5, 
         FormBox["43", TraditionalForm]}}}, {{{0.5, 
         FormBox["1", TraditionalForm]}, {9.5, 
         FormBox["10", TraditionalForm]}, {19.5, 
         FormBox["20", TraditionalForm]}, {29.5, 
         FormBox["30", TraditionalForm]}, {42.5, 
         FormBox["43", TraditionalForm]}}, {{0.5, 
         FormBox["1", TraditionalForm]}, {9.5, 
         FormBox["10", TraditionalForm]}, {19.5, 
         FormBox["20", TraditionalForm]}, {29.5, 
         FormBox["30", TraditionalForm]}, {42.5, 
         FormBox["43", TraditionalForm]}}}}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], 
    Method -> {
     "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
      "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]}], 
   FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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
Zf+uQqqJTvt9/kf8Dy1ktjQ=
              "], {{
                Rational[-15, 2], -75}, {
                Rational[15, 2], 75}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], -75}, {
                  Rational[-15, 2], -75}, {
                  Rational[-15, 2], 75}, {
                  Rational[15, 2], 75}, {
                  Rational[15, 2], -75}}, {{
                 7.5, -75}, {-7.5, -75}, {-7.5, 75}, {7.5, 75}, {
                 7.5, -75}}]]}, {
              CapForm[None], {}}, 
             StyleBox[{Antialiasing -> False, 
               StyleBox[
                StyleBox[{{
                   StyleBox[
                    LineBox[{{{7.5, -75.}, 
                    Offset[{4., 0}, {7.5, -75.}]}, {{7.5, -45.}, 
                    Offset[{4., 0}, {7.5, -45.}]}, {{7.5, -15.}, 
                    Offset[{4., 0}, {7.5, -15.}]}, {{7.5, 15.}, 
                    Offset[{4., 0}, {7.5, 15.}]}, {{7.5, 45.}, 
                    Offset[{4., 0}, {7.5, 45.}]}, {{7.5, 75.}, 
                    Offset[{4., 0}, {7.5, 75.}]}}], {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}, StripOnInput -> False], 
                   StyleBox[
                    LineBox[{{{7.5, -67.5}, 
                    Offset[{2.5, 0.}, {7.5, -67.5}]}, {{7.5, -60.}, 
                    Offset[{2.5, 0.}, {7.5, -60.}]}, {{7.5, -52.5}, 
                    Offset[{2.5, 0.}, {7.5, -52.5}]}, {{7.5, -37.5}, 
                    Offset[{2.5, 0.}, {7.5, -37.5}]}, {{7.5, -30.}, 
                    Offset[{2.5, 0.}, {7.5, -30.}]}, {{7.5, -22.5}, 
                    Offset[{2.5, 0.}, {7.5, -22.5}]}, {{7.5, -7.5}, 
                    Offset[{2.5, 0.}, {7.5, -7.5}]}, {{7.5, 0.}, 
                    Offset[{2.5, 0.}, {7.5, 0.}]}, {{7.5, 7.5}, 
                    Offset[{2.5, 0.}, {7.5, 7.5}]}, {{7.5, 22.5}, 
                    Offset[{2.5, 0.}, {7.5, 22.5}]}, {{7.5, 30.}, 
                    Offset[{2.5, 0.}, {7.5, 30.}]}, {{7.5, 37.5}, 
                    Offset[{2.5, 0.}, {7.5, 37.5}]}, {{7.5, 52.5}, 
                    Offset[{2.5, 0.}, {7.5, 52.5}]}, {{7.5, 60.}, 
                    Offset[{2.5, 0.}, {7.5, 60.}]}, {{7.5, 67.5}, 
                    Offset[{2.5, 0.}, {7.5, 67.5}]}}], {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}, StripOnInput -> False]}, 
                  StyleBox[
                   StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["0.`", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -75.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.2\"", ShowStringCharacters -> False], 0.2, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.4\"", ShowStringCharacters -> False], 0.4, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -15.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.6\"", ShowStringCharacters -> False], 0.6, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 15.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.8\"", ShowStringCharacters -> False], 0.8, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"1.0\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 75.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False]}, {}}, {{
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], {"GraphicsLabel"}, 
                   StripOnInput -> False]}, {"GraphicsTicks"}, StripOnInput -> 
                 False], {{
                  Directive[
                   AbsoluteThickness[0.5], 
                   GrayLevel[0.4]], 
                  Directive[
                   AbsoluteThickness[0.5], 
                   GrayLevel[0.4]]}}, StripOnInput -> False]}, {
              "GraphicsAxes"}, StripOnInput -> False]}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 150}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"ColorData", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"RedBlueTones\"", ",", "\"Reverse\""}], "}"}], 
                    "]"}], "[", "#1", "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkerSize", "\[Rule]", "150"}], ",", 
           RowBox[{"Ticks", "\[Rule]", "Automatic"}], ",", 
           RowBox[{"\"PinningPoint\"", "\[Rule]", "0.5`"}], ",", 
           RowBox[{"\"SmoothRange\"", "\[Rule]", "True"}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellLabel->
  "Out[306]=",ExpressionUUID->"0a3eccda-760c-49ea-b16d-338f33339e6a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{"N", "@*", "Length", "@*", "Intersection"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"knn1", "[", 
        RowBox[{"[", "10", "]"}], "]"}], ",", 
       RowBox[{"knn2", "[", 
        RowBox[{"[", "20", "]"}], "]"}]}], "}"}]}], "]"}], "]"}], "/", 
  "10"}]], "Input",ExpressionUUID->"6908309b-edcb-4f38-956d-348b1d668031"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Mean", "[", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{"N", "@*", "Length", "@*", "Intersection"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"knn1", "[", 
        RowBox[{"[", "10", "]"}], "]"}], ",", 
       RowBox[{"knn2", "[", 
        RowBox[{"[", "20", "]"}], "]"}]}], "}"}]}], "]"}], "]"}], "/", 
  "10"}]], "Input",
 CellLabel->
  "In[233]:=",ExpressionUUID->"6bbeb348-4588-4586-95ab-d050ec765692"],

Cell[BoxData["0.36518554687500004`"], "Output",
 CellLabel->
  "Out[233]=",ExpressionUUID->"0e4df56b-b42f-4237-9287-299625336dd7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scratch space", "Section",ExpressionUUID->"80d965c8-3a2b-4b2e-a146-bd657e165c20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gramMatrix", "[", "m_", "]"}], ":=", 
  RowBox[{"m", ".", 
   RowBox[{"Transpose", "[", "m", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[333]:=",ExpressionUUID->"42284bb8-aac4-4546-a89a-30c7576dd9c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rv", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Norm", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Transpose", "[", "x", "]"}], ".", "y"}], ",", 
      "\"\<Frobenius\>\""}], "]"}], "^", "2"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Transpose", "[", "x", "]"}], ".", "x"}], ",", 
       "\"\<Frobenius\>\""}], "]"}], "*", 
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Transpose", "[", "y", "]"}], ".", "y"}], ",", 
       "\"\<Frobenius\>\""}], "]"}]}], ")"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.932824607052926*^9, 3.9328246107546587`*^9}, {
  3.932824697089377*^9, 3.932824706426708*^9}, {3.932824739170965*^9, 
  3.932824785492428*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"f2a4edc2-979d-4706-92e1-66f08d318264"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"embs1", "=", 
    RowBox[{"getDatasetEmbeddings", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<google/gemma-2-9b\>\"", ",", "\"\<web_text\>\""}], "}"}], 
     "]"}]}], ";"}], "//", "EchoTiming"}]], "Input",
 CellLabel->
  "In[311]:=",ExpressionUUID->"a486785e-b688-4618-ab4c-ef5e91cc7968"],

Cell[BoxData["4.306154`"], "EchoTiming",ExpressionUUID->"9d940855-fb9e-42ba-a318-6f7e850d0fff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"embs2", "=", 
    RowBox[{"getDatasetEmbeddings", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<google/gemma-2-9b-it\>\"", ",", "\"\<web_text\>\""}], 
      "}"}], "]"}]}], ";"}], "//", "EchoTiming"}]], "Input",
 CellLabel->
  "In[310]:=",ExpressionUUID->"ec3468f6-ba9e-414c-8306-144c71e513c9"],

Cell[BoxData["8.325759`"], "EchoTiming",ExpressionUUID->"fff12e4c-ab81-4d50-80a0-423ce6bb89a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gramMatrix", "[", 
    RowBox[{"Normal", "@", 
     RowBox[{"embs1", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "//", "Dimensions"}], "//", 
  "EchoTiming"}]], "Input",
 CellLabel->
  "In[340]:=",ExpressionUUID->"58caee77-eb49-4f52-816b-c8f2adee50ae"],

Cell[BoxData["0.11042`"], "EchoTiming",ExpressionUUID->"c9b5f86f-7f0a-4b64-a332-dcd09df429cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2048", ",", "2048"}], "}"}]], "Output",
 CellLabel->
  "Out[340]=",ExpressionUUID->"454db84e-dd89-45f4-83c3-89d785b86a42"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rv", "[", 
  RowBox[{
   RowBox[{"gramMatrix", "@", 
    RowBox[{"Normal", "@", 
     RowBox[{"embs1", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
   RowBox[{"gramMatrix", "@", 
    RowBox[{"Normal", "@", 
     RowBox[{"embs2", "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}]}], "]"}]], "Input",
 CellLabel->
  "In[341]:=",ExpressionUUID->"3b8c0cca-3727-4ec0-b6e6-e1451d67e724"],

Cell[BoxData["0.9998590044093615`"], "Output",
 CellLabel->
  "Out[341]=",ExpressionUUID->"05350a3f-7406-4d2e-80e6-a96c9bc9ef7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RepeatedTiming", "[", 
  RowBox[{
   RowBox[{"Normal", "@", 
    RowBox[{"embs1", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "]"}]], "Input",
 CellLabel->
  "In[319]:=",ExpressionUUID->"29f9f595-e7d7-4be1-9f1c-a9d89a6d9746"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0062377421875`", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[319]=",ExpressionUUID->"2fb19600-9882-45b5-8c0a-a649be6f40ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"matRV", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"rv", "[", 
       RowBox[{
        RowBox[{"gramMatrix", "@", 
         RowBox[{"Normal", "@", 
          RowBox[{"embs1", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
        RowBox[{"gramMatrix", "@", 
         RowBox[{"Normal", "@", 
          RowBox[{"embs2", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "[", "embs1", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "[", "embs2", "]"}]}], "}"}]}], "]"}]}], ";"}], "//",
   "EchoTiming"}]], "Input",
 CellLabel->
  "In[342]:=",ExpressionUUID->"fb303f70-34f3-4037-8052-0c09209e6c90"],

Cell[BoxData["838.015394`"], "EchoTiming",ExpressionUUID->"bfb11642-e7e3-4f09-8db0-2bd5a8a16383"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matRV", "[", 
  RowBox[{"[", 
   RowBox[{"7", ",", "10"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[344]:=",ExpressionUUID->"31693922-e195-401c-8efe-50d2a2acd198"],

Cell[BoxData["0.9957998895738429`"], "Output",
 CellLabel->
  "Out[344]=",ExpressionUUID->"633d913b-8fd2-432f-ad23-4920adef7760"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"matRV", ",", 
   RowBox[{"ColorFunction", "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"ColorData", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<RedBlueTones\>\"", ",", "\"\<Reverse\>\""}], "}"}], 
        "]"}], "[", "#", "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ColorFunctionScaling", "->", "False"}], ",", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"BarLegend", "[", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], "]"}]], "Input",
 CellLabel->
  "In[343]:=",ExpressionUUID->"26e9544f-afff-4ecb-8de3-eba77b485a64"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    RasterBox[CompressedData["
1:eJwsmnk0ld/bxpHMqSShomRKhYoU5WowR9EgKmOovoUMqVSIDE0I0YAiERWV
BkOkcs7heM5xyMwZTEUDKlFR3v1b6/2jtVr3etbe+9nPfV/X58JiT/8d3tOE
hISW/f+///1/t9d4bFVCP3oi7QyKw1th4CE0bDvegoD3/aa/R3tQK6K3pDSc
g9Q24aSHtxuh9PJzyO2WHhSmBDvN2M1BidN4SUhEIwK7rb6+ru9Glptn3gid
hfZFhzU0AhsQWyL5INuErPO6ssN2jI3C3A/qCt0N8Lijc+FGfjd6BRxewT4W
HrStW/LJpgESsiVOH5Z0Y6GHx42S3jpsbk847/uGgxaHd1fuWXbj+Emvq+ut
KMTrKX/W+8DB8aBvq7/N6EbC3LVP/9yrw6Kz0jrtBRwoKd13dO8V4Kbc7uU2
unV4combP4e8B39+cX50vgC39OIvpF9iIt6oNvzaFg66aG+ejN4T4ORJT69r
55gwtlJ6+AkcWPYWO047L8BwWJSCuhoT/zk5GkxbyEG988+RMn8BXCnpd/MH
a/Hw040KLQkOvE20by47LICYTUhRfkstDJZtaTkkzIFUzpVE3wMCLJohvuQ8
vRaNCoE7RcbrYfA1TzzOSQB+WqmjIK8WLtIT628I6tHhPbuj6D8BvM6s9vra
UQshV5u5v0Q4MN5rL+NsLUB8SF6B7tlaeEoMKLi9qUdY5MpZYlsFsAgemeo7
VwvD07OONlTXo84gPLEvRAC6ok4B/tZi4bT9ttEzOVg0XuA2jdRdtDyO0//U
QnFRSVmGLAe5e1Mc3kUI0FKkliCkxITUzMOZD5Q42K/ORNhlAZiHX3tPrmNC
8J/pzXINDr6p0WYtSCT3fG7jAy0zJnYuWZQTtJSDHcxbTkKPBFALHBb1vsZE
wJmOQ0stOfBZXrvANE2AIcMnZmucmBDZ43uoVp+D33t3ZgdFCcA+HSOSuIjs
+3PS138BB2HnZWRHggWQXR5pWzVeiziNxvTIGeQ8VbnZpV5kHS1JwVJmLfbv
WGn56Hc9XsZU9uiZCqCQ7/+ccqnF3FsHPv1XUI91Q0uaLhsL8ProieKknbXw
svWYOZJdj+U+3yenNgqwJXLLxefetVDVPDK4+nE9Mod/CpVaCpAUZ8pOP1mL
gNF+P/HKehSm+lzMdBDgaWEm7VhKLSz+yol5Ntbji+j56OgdAmwd8Nr8J7UW
Z7P7Zm9oqkdNt+OiNbsFaLwoH3MxsxZJ3j7WtPZ6+NkPXOj2EOBH+a1Enbe1
eJWg2fr+Rz3yXBga5TsFaNrW0+N+sxanss90lbbU47BxucInTwG2FVUEyNFq
MRG/8uuPn/VwDQvQnIoW4HaV6+RLLSaq/izwmaHKQa1q+vYrAgF6fnUsdNas
Q/PPrdrLz3Awb13Qa8sVApiWXk/crFuLGPEfIfdiSZ8EWsdsefEBd0SNVX+V
dUBlwSePRaNt6PtV+Ff8Qy9q3j/v4r1vhA5XRqp2XhPWSs6XHib1D7I3BAdb
GjE4b7Gxk1ITOgY3pdpH9qDzZ22sVEU9ro7svVS9tBHLlY7Ef1vZC8mdso7T
OjjYYLlJO1dA6nvMc12ceqAQ9WiOgmU9ogySArL+NcAkhVGid6EbIeIHY2OE
WLjkp2J3bWkDdD3ixet7urFgnp9k3CQLU+2SAZXRDRB70BuYENuNwH4vsdEJ
CubHP68f1GrAjJXec+UUuxHvEh57/G0d1A2HT295zsF22dgPHqTfeAVrNVxJ
vxnG3lrpQvptq+m2f52k3/6dP9MbS/pN/kHGhC/pt+L9M+RPzhWgLL1x37bP
NWgI3Pr+oWM9GKozEhO5fMgJthvGhNVghd+5NQvE62FavCxlbQsfzLz7c1YH
10C3b+NE/BQbFh/N1fQW8tE8x7le5hgD4V0efMtNbBSLgfG3mIdDJxNGtLro
aKUZ1s5vZiF7z/nubn8ebv/ev97nDB3BGkel5RJY+G/e9OTpdB5yPyUcO/eT
jtnXtR1yP7Jw8aBR6k5vHjZTVX/jfemQuO+8xug8Cy+0ul+zP3Lx7wvLTaGC
hqpn57aoT2PB79tK3cARLnIDz4Sb1NLg4he4S0yGhZPJb0aVm7lIuPZQti6b
BlGTedyBYQqpsxaPimRyMdljSd+9m4bffywPbHpJQUTk2hON21xUbpx/YciR
BgP3pv1HSyiISacWr4vnQrA6SFodNMTLhjycnkchIoqz5m8pF5uzuX4PztBQ
5igWKdZEoZ3W1y9Sx4XNl+PSN1PI+iLvMmL7KWjutFlxsYyLWfckMgPO0nCq
IC0kjTzfnDllETjKxf27W7Z3sml4c+Kd35JZLGy+9e5YuhkP4oyniomgw1fx
eEeSJws1WSbbmQE8KLmJDsuH0xHembVN4ioLW+arXhSu4sF+v+gmma90RAoz
80O6WSjQT8w585eH+FxxjzNbGFiyR/9K0SI2rhrPKFg6k49R5YRNjvsZaFtW
8KprFRsK07n/5rN52FJhaC8QYkB4bKXH+DAL+3rP+ugc4sE7NL/1cgAdQr43
0tViWaDsYi4oTONhrOj+goBeGmRl1TtXqrKwQsf+h0c5F+vD/v25E0ZDX7+6
8/FmCsrsFG25s1w4Suxumq5Fg/zcra89rlFw1/2ybqkNFyIKW30C+dVQkU54
JO5BoW/51dUyq7goMLG4eKmimuhVT70J8U/nRZpm3jd4MO14fOfdCzrUC0T8
35ayMG3pLp9k2Q/oKvaX/9bbhuVL1r463NgKKmDU6cfWXui3h1fNWtKA92wO
I2XGe5x8a+4rbtaLyzNSjnBkGqBd80irf6oRRmn2kupN3bj7pibc+j0L3E5V
xfwQMqfPaqvGgnug6KkoFZFWj0OBPR8lFzSi1/netMJH3YjWYbCWHGRh0Rqh
1Qu2N6DtpTC/Z0SAz8+ilS131cErxV7r12UOWMHbHyqhGzKOnhcN9CnM/a9m
tg+Xg4oHhSJRHwQQFupdMd+oDknj/bPtIjnQ8jhXphhLfPCF4ut6HSay3Vt/
6C7i4PyY3YON00k9c0zzeUUNuae61h2G9Vj1Tbhf5hsfDIOpE59v1KBSrqFJ
Y349rqhsu5dsw0eUQ+5JXhEDEb92nP/pz4bsJdV8T1E+eF/VrPTsGLh6l57K
0GLjpg/938dvPOzvO25lsJoBEWrfMF2eDd2G0U2rPHlQvWTtrn2Yjr/MBr2p
CBbk5zuYLZTiQUTcXXjHVxr8MjTijmiyYFtM03s+xAV7K4dbS6ehOuBE+Xop
FkQOGPz7TJ5XXiecGzxEQ/OpsQUbtVjQ7lnOnM3k4vGE9CzLZBqK7RoeJfRR
KI04WhAcR/ph5IifuBENntWZLIUsCoU3ZBWHLnHxwuPIwKAJDcPftx/Nz6Gw
ic7XnxHEhVjZ4vvDijRc9ri4WP4SBVFajNZrLy5S32jIvxelYevZWDfXMxSO
/n5vdmoXF4GGPqrfv1bjwUBXWPYRCnHhzf6P93Hxx2xy4bxf1TgfbzsxI4jC
lyt7JGa7c0FFnL9h+q8aAs9pDvEnKHSM/x7RdOOiuybv9M/Jaoz+tL2eEUJB
ytJ7dL0jF8ohd5f6jlQjPT3yd6AvBckfjnJzwrmImuX/o2UpDU2f5ugHpFEw
+pVyuDuZnL/ko+88Sxqcms8daHlIIfQi21A+n+iJZbl6vxcNW2q292W/Jec8
s3HgVy0XywP3y6uTe9vx+dS8EHJvPjdU7PTI/Vckfc+aQe4/9Y+kbLEkCzIL
wkRc/3CRGT60U7eVhs3B5xWNFViw2VwRY9fIhbqork9HJg2GH5csFP9KwaUv
XsT0OhdCSUds1tnRILewOH3HE3Kf3MrJ8cNcaE6eS9aRoUF9d9vsinMUlom9
bXtiwcWZqnxWUkc1dDL0dU64UDB2zFs5qcdF8DffVffKqjFiEdG+wILCuXOf
VQqXcuFXPPMz40k1DsUdn5kFCil+mcLdO7kIG94wYwH5LiGmWZ+nk+/iezb1
be8lHpZvnHmLfpeOD1J1U7wHLHSESTjtkPuAu2kmz0OG2nD+y5rwnrZWxGgd
8qZZ98Jztl3YtwUN4G2tqudIvkdj4J8Dezf0Yq3xq4aZfzjo76wK2T9K8oKX
cNIfTjeolusHvJkshN+5VHwoqAEhIWt3pQT04LC2C23iSj3JH7Lf4hUbYSAe
Z2FS2A2h0nGRJ4dYsPNXD3lEdOCx4fKCR6MCJL50axtxrUPjm4gAXiIHNfqh
Ji83dIMblPhh+3IKY5a/U393chD1ouq9EOF/z3MFtzasqEN8lW/gkzAOOHa0
r1suEP7pWd4/oM9Ew5nXgsNqHFw+cvd1jJQAKtulvS9QNUhfURW6bGM9ljB5
5Uv/8hGcFiP1o6AG7rPWht/Uqseo7LKZnU58uB7sf/XtHQPt+k0hOWFs9PXu
78+X5eOLw+7b2fsY2PL9irMz8YUi34jAQ0M8DCzir7bWZeDLvrzpurPZ8JGR
+U/0GA+u/vG1qcTfs584xRsSf2/M83+7R5EHUabW/J3CdIQWrV05w5CFmJ7E
vz9leODceH1xxzcaohat7XdayoLDwzVRDHEeFK133ZT8RMM2mY42UXWi50dL
f3gQH5+wCuHr3qUhc6KZt3KEgnztjCz/h1y0Ktf7ZhymYahMLE+BTuoftajS
Ii7+mzM3ZIMf8R2h8w9P1lKYNaUud/YGF955gbzf22gIE5Q9v/mUgs5L87r6
NC7KTDJ3Z9rSEMrYbNH9mMLDqveqvyO5WBh/WGOHHvHxt+sjg25RqJSecE4k
z1/XDFpiTp737P0pcYc8H1Gr+usg0aUp9suUn2uInrA3v5YkukS1Go2+O8nF
h0E1g1+LaOhQnbNzNJGC1tI3KyyOkTnlHpsuMZcG5VnTJ9bGUVCUvHr7dBIX
Y886fBaZ0zCzZv0JnwcUNkpNHyu7yMV+rVAlY2Ma4twd0nzvUkRX5MOnErhI
qWXKZG8iume5a0fbfQrpL9Su/iTvm7Jjo+Xd7TQ8eHo4U6GYQkONzX+T5N6m
m7u7HPiPhhfr5/jmkXtbs087tKmEi47/7m2QOk3DLyumS3MjhZZhjZDXZB05
zmPDPWQdJ1uVCR65tz9L+SLR5PxP2ZL73cn5VT6UpJ0i598/PvPjYaKT68rd
fhSPV2PaEqUgWiCF6pt2y3dbczGk42xmxatGTZVn5gp3cn6LgAMPzbgIufnI
pry1GidO9Mkc2EdBcNo9X4qs8zRgn4wuWWebWmvkAbJOoMqKO0F3udBas4Yx
sZ/o1U27c+2vKBSzdvZ6PeGh+Z2Q5rk2Ohq9t8861shCZ/ihyUtd/Qhct/fB
4T1t2HWkKvDP6VZE01eeddfsRVNZpL0ujYPxo01ioY2NwIkwKl22F3MHn8yg
3eXg6bIEMamyRgwMrz8nRPx9lrXOZxNvFopXRNEPb2tAVntbgMfGHvyTfZ2T
M43w/w7WzvH+BlQ7BqvOi+vGl5EX0QF/iV6XGL8J1m7Afw+ejw23C7DaICf3
9Zw6/Guwbnc9TridpXezXbkbHrXh6yyYdZispLRUSzg4LXbv8p/XAvj9bs5+
w2SCF/F8zaO9HAhuPKic8BPgmVCOusjHWog3Ty46IM5Buq1Gh+0vPow3qTQu
yKmBXt3CfTfV6tGqn/p0fS8ffa+lOOExNejSWhb6TaYeC3dfkthpy4fXrQ8n
dj5loGpXaPKbADYknC8XWYjxcUK2v7Z1OwO/F1TvKF3KhtVTg63KnTxY2eRy
1ecw8GlVc+/Ovyz05R9hHgri4eCzjIJ95+hI/acW+zSJhcfBo8nHtHnQ6fQp
Hp1HR9+14dKb5ix8erzmOt+Eh8v3izZYrqajulcoL9WZhaaTCkfaZHmEyzJY
v37QMCuqdNJqGQslDhqGLV+JT7FD3BJpNCQ2zzq2h/jX6qzQsVufuNhW6Vkm
9oYGCbeTzOliLEhs0D/QTfLC3rFvyfokL+yJH/U1InnhVtrhitPE18Sc7N3m
36bh2ER/9hriawGdz7cbkeeFhveGbHpFg3aYzYU4ERYULJWTnxCeT4vpupNw
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
ZDV+OM0I1/jJQnHL/b8rTdpRHpaueuEJ6elX5dYeOM7Gbq3Krdw77Rgxdt/i
NacGa48s7t9UyMZIrZbbOpLPlfZpvbzMroHqJPO2B1s46PCq2mW+QwC3qIHh
9RfpuPLL+4DRh///vndgTQuZt6F/56Xa/p8bvc/lbCfz9ujGg5TVZD55Lt1y
k8h8VjmV6lwg82k7a2pP5AMBDpnJMMNcyXu86mFmuIqCveTSl67jAlQntMSt
u1iL8ptpdU0PKCT8fN14ZboQjKWBsREZtbh+2LL91FMKp0sMRpSWCME0fDVg
2kk4Ja5893EZhTBeoWf+ViH83VQbD61nIvKdt8R8IYWjH/f85lkJkTA6wJQh
/U1B7EN7Uj+Fld0jrp4eQnxrut9jnMGE16hW/ndpLnIUVoiruArRv+njP04k
4dSg+NChSVyU3jjlIO8uxKNkB9uBB0wseJg/6inOxTZ/p4dcJ8Ip5fcFR24y
ccyNOyZGOMUq4uleXS3E0r6Elk1zmNhWtm/GrToyt9fVT06aKcSgqdV4TE4t
Ch01o8afEy5/GagsVhPi43H5q6s+1iK00vaqWjGFKyk2PrbLhbCbcLXT+1GL
LZ0hFf9Ifh7+FNmuTZ5Xu6BSpmUtE0rfPkVFCghni//s7TUVIuqYRYGhKROr
E9Z5+3RR8HgLxk5rIe6/cCtbfpTwbOV/VgsHKLSnHfZWJFxeYm9Py0hmIqGN
xrpGuCydvai0O0yIts5dn5ZLs/D55V8xF20uNlZu1jxN8nmK9VD/0DATNWMm
FwtIPl/Z/0mDmSZEcov0hOYeFjqnir7/2c7FjPzshgsVZB/D9jcn0lhwkuqR
vubOxSpkDdloi2BzlSrfVstGS8Xouf1cLuorcyV0yoQwenooaySRBbbi9HjN
w1y8Xee7vHAXmU/lC1HyQXTsoXiWq2kcPAvYMKu9ng9tJ/e2cymVYI+57Xza
T97zMtV3Q+F8zFTMLtm/sRJW6q7n8p8Qv6HJ9RzfRPK2m2JPL5uG/IFpmoM2
hKfv2iqndbVCq/yB7s69NJT6X5SX+1OLReUSxfPn8PF+hXZYWwwNtQOx0Ze0
mEjPcpp68DIfakOj6hu0CK91vuoVxTIx+/j3mGZ/PqJ6d+zMX0r8p9Ajetk9
JorFvaoOd/GxKRuLc9+R3pE+uTxjEguhcUWiEtM2pLx7/TNiaxUeddp+qDjC
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
     "], {{0, 0}, {43, 43}}, {0, 1}], Frame -> True, 
    FrameLabel -> {None, None}, FrameTicks -> {{{{42.5, 
         FormBox["1", TraditionalForm]}, {33.5, 
         FormBox["10", TraditionalForm]}, {23.5, 
         FormBox["20", TraditionalForm]}, {13.5, 
         FormBox["30", TraditionalForm]}, {0.5, 
         FormBox["43", TraditionalForm]}}, {{42.5, 
         FormBox["1", TraditionalForm]}, {33.5, 
         FormBox["10", TraditionalForm]}, {23.5, 
         FormBox["20", TraditionalForm]}, {13.5, 
         FormBox["30", TraditionalForm]}, {0.5, 
         FormBox["43", TraditionalForm]}}}, {{{0.5, 
         FormBox["1", TraditionalForm]}, {9.5, 
         FormBox["10", TraditionalForm]}, {19.5, 
         FormBox["20", TraditionalForm]}, {29.5, 
         FormBox["30", TraditionalForm]}, {42.5, 
         FormBox["43", TraditionalForm]}}, {{0.5, 
         FormBox["1", TraditionalForm]}, {9.5, 
         FormBox["10", TraditionalForm]}, {19.5, 
         FormBox["20", TraditionalForm]}, {29.5, 
         FormBox["30", TraditionalForm]}, {42.5, 
         FormBox["43", TraditionalForm]}}}}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], 
    Method -> {
     "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
      "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
      "RangePadding" -> Scaled[0.05]}], 
   FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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
Zf+uQqqJTvt9/kf8Dy1ktjQ=
              "], {{
                Rational[-15, 2], -75}, {
                Rational[15, 2], 75}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], -75}, {
                  Rational[-15, 2], -75}, {
                  Rational[-15, 2], 75}, {
                  Rational[15, 2], 75}, {
                  Rational[15, 2], -75}}, {{
                 7.5, -75}, {-7.5, -75}, {-7.5, 75}, {7.5, 75}, {
                 7.5, -75}}]]}, {
              CapForm[None], {}}, 
             StyleBox[{Antialiasing -> False, 
               StyleBox[
                StyleBox[{{
                   StyleBox[
                    LineBox[{{{7.5, -75.}, 
                    Offset[{4., 0}, {7.5, -75.}]}, {{7.5, -45.}, 
                    Offset[{4., 0}, {7.5, -45.}]}, {{7.5, -15.}, 
                    Offset[{4., 0}, {7.5, -15.}]}, {{7.5, 15.}, 
                    Offset[{4., 0}, {7.5, 15.}]}, {{7.5, 45.}, 
                    Offset[{4., 0}, {7.5, 45.}]}, {{7.5, 75.}, 
                    Offset[{4., 0}, {7.5, 75.}]}}], {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}, StripOnInput -> False], 
                   StyleBox[
                    LineBox[{{{7.5, -67.5}, 
                    Offset[{2.5, 0.}, {7.5, -67.5}]}, {{7.5, -60.}, 
                    Offset[{2.5, 0.}, {7.5, -60.}]}, {{7.5, -52.5}, 
                    Offset[{2.5, 0.}, {7.5, -52.5}]}, {{7.5, -37.5}, 
                    Offset[{2.5, 0.}, {7.5, -37.5}]}, {{7.5, -30.}, 
                    Offset[{2.5, 0.}, {7.5, -30.}]}, {{7.5, -22.5}, 
                    Offset[{2.5, 0.}, {7.5, -22.5}]}, {{7.5, -7.5}, 
                    Offset[{2.5, 0.}, {7.5, -7.5}]}, {{7.5, 0.}, 
                    Offset[{2.5, 0.}, {7.5, 0.}]}, {{7.5, 7.5}, 
                    Offset[{2.5, 0.}, {7.5, 7.5}]}, {{7.5, 22.5}, 
                    Offset[{2.5, 0.}, {7.5, 22.5}]}, {{7.5, 30.}, 
                    Offset[{2.5, 0.}, {7.5, 30.}]}, {{7.5, 37.5}, 
                    Offset[{2.5, 0.}, {7.5, 37.5}]}, {{7.5, 52.5}, 
                    Offset[{2.5, 0.}, {7.5, 52.5}]}, {{7.5, 60.}, 
                    Offset[{2.5, 0.}, {7.5, 60.}]}, {{7.5, 67.5}, 
                    Offset[{2.5, 0.}, {7.5, 67.5}]}}], {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]]}, StripOnInput -> False]}, 
                  StyleBox[
                   StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["0.`", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -75.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.2\"", ShowStringCharacters -> False], 0.2, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.4\"", ShowStringCharacters -> False], 0.4, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -15.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.6\"", ShowStringCharacters -> False], 0.6, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 15.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"0.8\"", ShowStringCharacters -> False], 0.8, 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 45.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    InterpretationBox[
                    StyleBox["\"1.0\"", ShowStringCharacters -> False], 1., 
                    AutoDelete -> True], NumberForm[#, {
                    DirectedInfinity[1], 1}]& ], TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 75.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}, {
                    Directive[
                    AbsoluteThickness[0.5], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False]}, {}}, {{
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], {"GraphicsLabel"}, 
                   StripOnInput -> False]}, {"GraphicsTicks"}, StripOnInput -> 
                 False], {{
                  Directive[
                   AbsoluteThickness[0.5], 
                   GrayLevel[0.4]], 
                  Directive[
                   AbsoluteThickness[0.5], 
                   GrayLevel[0.4]]}}, StripOnInput -> False]}, {
              "GraphicsAxes"}, StripOnInput -> False]}, PlotRangePadding -> 
            Scaled[0.02], PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 150}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"ColorData", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"RedBlueTones\"", ",", "\"Reverse\""}], "}"}], 
                    "]"}], "[", "#1", "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkerSize", "\[Rule]", "150"}], ",", 
           RowBox[{"Ticks", "\[Rule]", "Automatic"}], ",", 
           RowBox[{"\"PinningPoint\"", "\[Rule]", "0.5`"}], ",", 
           RowBox[{"\"SmoothRange\"", "\[Rule]", "True"}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "False"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellLabel->
  "Out[343]=",ExpressionUUID->"83f5f4b8-6b90-451f-9c51-b4f78d1323e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"embs", "=", 
    RowBox[{"Normal", "@", 
     RowBox[{"getDatasetEmbeddings", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<google/gemma-2-9b\>\"", ",", "\"\<web_text\>\""}], "}"}], 
      "]"}]}]}], ";"}], "//", "EchoTiming"}]], "Input",
 CellLabel->
  "In[214]:=",ExpressionUUID->"10509343-cfc0-401e-9309-9497f599e87f"],

Cell[BoxData["4.462942`"], "EchoTiming",ExpressionUUID->"7af47416-7b04-4286-8191-ef92f06b7a8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "@", "embs"}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"aa37d754-0ad1-4b5b-ab2c-7c3dfcb8953b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"43", ",", "2048", ",", "3584"}], "}"}]], "Output",
 CellLabel->
  "Out[175]=",ExpressionUUID->"2dfc5271-4ce4-43c5-b2fc-190a6a8aa40d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"embs", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->
  "In[174]:=",ExpressionUUID->"b1e5adad-b7c3-4678-96bf-d03014fd05a6"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->
  "Out[174]=",ExpressionUUID->"676de4bf-ef59-4003-9afb-6e889b2e4dfc"]
}, Open  ]],

Cell[BoxData["DistanceMatrix"], "Input",ExpressionUUID->"10fb935a-e509-4716-b4e4-11f5ea83464f"],

Cell[BoxData[
 RowBox[{"Depth", "[", "]"}]], "Input",ExpressionUUID->"9656b456-8978-494b-8b5d-8e5d44afcb3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayDepth", "[", "embs", "]"}]], "Input",
 CellLabel->
  "In[182]:=",ExpressionUUID->"5d2a1dd3-29ac-4a10-a378-eb5ef714b07e"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[182]=",ExpressionUUID->"01385e3d-352f-4959-b82d-b0a438e28920"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IdentityMatrix", "[", 
  RowBox[{"Length", "[", 
   RowBox[{"embs", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[207]:=",ExpressionUUID->"ea5f00a0-ec38-4f4b-a609-a91722417719"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["IdentityMatrix",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzt0rEKQXEYhvFTbkPquAKilNR/kmyYWChllI3FZLUbZLIog8VZTorBIAaT
YjMonZRMZJKUwSWcV8/w1ddveofHrjYKtYBlWaHvff5ka1buh7dmEBs6iefO
eEP7lB9fDI772d1uJO06njlkRpN272rWxfqrcr/5bieO//pqk5vHF3vTPEZT
j+nZTIOlZSdLt7i/nW5xRadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5x
RadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5x
RadbXNHpFld0usUVnW5xRadbXNHpFld0usX/yd9Oi59B
              "], {{0, 0}, {30, 30}}, {0, 1}], AspectRatio -> 1, Axes -> 
             False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
               "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2048", ",", "2048"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzt0rEKQXEYhvFTbkPquAKilNR/kmyYWChllI3FZLUbZLIog8VZTorBIAaT
YjMonZRMZJKUwSWcV8/w1ddveofHrjYKtYBlWaHvff5ka1buh7dmEBs6iefO
eEP7lB9fDI772d1uJO06njlkRpN272rWxfqrcr/5bieO//pqk5vHF3vTPEZT
j+nZTIOlZSdLt7i/nW5xRadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5x
RadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5xRadbXNHpFld0usUVnW5x
RadbXNHpFld0usUVnW5xRadbXNHpFld0usX/yd9Oi59B
              "], {{0, 0}, {30, 30}}, {0, 1}], AspectRatio -> 1, Axes -> 
             False, Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
               "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"2048", ",", "2048"}], "}"}], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"WorkingPrecision: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  StyleBox[
                   PaneBox[
                   "\[Infinity]", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                   False], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  IdentityMatrix[
   StructuredArray`StructuredData[{2048, 2048}, {
     DirectedInfinity[1]}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[207]=",ExpressionUUID->"f306bfc8-f1fa-4963-83cb-8d136a108bcd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"knnMat", "=", 
    RowBox[{"getKNN", "[", 
     RowBox[{"embs", ",", "10"}], "]"}]}], ";"}], "//", 
  "EchoTiming"}]], "Input",
 CellLabel->
  "In[228]:=",ExpressionUUID->"287775ad-7a12-472a-91d1-e6f9ffa3114a"],

Cell[BoxData["12.717429`"], "EchoTiming",ExpressionUUID->"9f72b3c5-8d4d-4499-9afd-4cf5744e5901"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"knnMat", "//", "Dimensions"}]], "Input",
 CellLabel->
  "In[212]:=",ExpressionUUID->"a8f30331-b360-4957-8018-51288df8634d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"43", ",", "3584", ",", "10"}], "}"}]], "Output",
 CellLabel->
  "Out[212]=",ExpressionUUID->"5cd35cbf-d32b-4790-a2b1-c4c9850db68a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{
   RowBox[{"embs", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ".", 
   RowBox[{"Transpose", "[", 
    RowBox[{"embs", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[185]:=",ExpressionUUID->"ed3c0ddf-984e-4ef2-a12b-5b6f5cbb2fc3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2048", ",", "2048"}], "}"}]], "Output",
 CellLabel->
  "Out[185]=",ExpressionUUID->"ac5dbf89-823a-478e-97c4-e4f0504d5c05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "@", "embs"}]], "Input",
 CellLabel->
  "In[186]:=",ExpressionUUID->"4df84543-8db8-46f5-972b-81bd57952cc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"43", ",", "2048", ",", "3584"}], "}"}]], "Output",
 CellLabel->
  "Out[186]=",ExpressionUUID->"ed8e9565-d8a2-4bac-ab02-82035673c119"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MinMax", "[", 
  RowBox[{
   RowBox[{"embs", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ".", 
   RowBox[{"Transpose", "[", 
    RowBox[{"embs", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[187]:=",ExpressionUUID->"8c5572a9-0453-4737-82db-a3d4e3d0999c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.2866830205568518`"}], ",", "1.0000003876307553`"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[187]=",ExpressionUUID->"e1ed97a9-97c9-40ca-a51a-fbe6d63f4f74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{
   RowBox[{"embs", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ".", 
   RowBox[{"Transpose", "[", 
    RowBox[{"embs", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[189]:=",ExpressionUUID->"3a49d02a-1704-491f-a4ca-7499842fc571"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2048", ",", "2048"}], "}"}]], "Output",
 CellLabel->
  "Out[189]=",ExpressionUUID->"a55c0af0-67d0-4ec1-ab6c-402c8f0a965c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"embs", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ".", 
   RowBox[{"Transpose", "[", 
    RowBox[{"embs", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "-", 
  RowBox[{"99999", "*", 
   RowBox[{"IdentityMatrix", "[", 
    RowBox[{"Length", "[", 
     RowBox[{"embs", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[192]:=",ExpressionUUID->"dc676e3a-0ea5-483a-8071-c9011fdc1768"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], Short[#, 8]& ], 
   "line" -> 192, "sessionID" -> 26824937326441982721, "byteCount" -> 
   33554592, "size" -> 8, "stored" -> False, "expr" -> Missing["NotStored"], 
   "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellLabel->
  "Out[192]=",ExpressionUUID->"e72fce51-c1dd-4209-ba70-933c5b0ec466"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", "@", 
  RowBox[{"EchoTiming", "@", 
   RowBox[{"getDatasetEmbeddings", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<google/gemma-2-9b\>\"", ",", "\"\<book_translations_en\>\""}], 
     "}"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"4b88ae3a-bbcf-4de9-8740-a06c705789dd"],

Cell[BoxData["4.134903`"], "EchoTiming",ExpressionUUID->"03ca51b0-4999-4119-b9b2-816367966b22"],

Cell[BoxData["1262485672"], "Output",
 CellLabel->
  "Out[143]=",ExpressionUUID->"6a4f1a6b-12e4-4fa7-86c3-166e8150c821"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["OLD", "Section",ExpressionUUID->"514c9271-9e47-4b99-b564-764a5de8203b"],

Cell[BoxData["Quit"], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"c94166e2-97ca-4677-a14d-e47cf0f3ca26"],

Cell[BoxData[
 RowBox[{"Clear", "[", "m", "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"8072df8d-3e48-4638-a88c-174871718187"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"33", ",", "1024", ",", "4096"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"d42a4659-11b1-4d77-a760-d7d77947f5f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EchoTiming", "@", 
  RowBox[{"Dimensions", "@", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"layer", "|->", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"e", "|->", 
         RowBox[{"Ordering", "[", 
          RowBox[{"e", ",", 
           RowBox[{"-", "10"}]}], "]"}]}], ",", 
        RowBox[{"layer", ".", 
         RowBox[{"Transpose", "[", "layer", "]"}]}]}], "]"}]}], ",", "m"}], 
    "]"}]}]}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"505f4e9f-e00f-405a-bcb2-d0f72dada540"],

Cell[BoxData["2.217675`"], "EchoTiming",ExpressionUUID->"ab0378c2-377d-4d28-a16f-062fbf61369a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"33", ",", "1024", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"815e50ba-8d74-4dbd-a2ef-e8ff89cf14b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Ordering", "[", 
    RowBox[{"#", ",", "10"}], "]"}], "&"}], "/@", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"m", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ".", 
    RowBox[{"Transpose", "[", 
     RowBox[{"m", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ")"}]}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"c4cdcb52-0594-4ec0-87a3-717687ddb529"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"460", ",", "453", ",", "824", ",", "831", ",", "631", ",",
              "942", ",", "176", ",", "124", ",", "165", ",", "271"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "460", ",", "435", ",", "624", ",", "896", ",",
              "417", ",", "8", ",", "271", ",", "124", ",", "311"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"453", ",", "176", ",", "985", ",", "417", ",", "761", ",",
              "732", ",", "271", ",", "722", ",", "690", ",", "124"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "124", ",", "985", ",", "460", ",", "193", ",",
              "860", ",", "417", ",", "906", ",", "463", ",", "366"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "453", ",", "271", ",", "9", ",", "722", ",", 
             "290", ",", "109", ",", "896", ",", "308", ",", "124"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "124", ",", "417", ",", "453", ",", "896", ",",
              "366", ",", "146", ",", "371", ",", "109", ",", "110"}], "}"}], 
         ",", 
         TemplateBox[{"1012"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{"{", 
           
           RowBox[{"124", ",", "761", ",", "193", ",", "686", ",", "855", ",",
              "453", ",", "460", ",", "202", ",", "729", ",", "311"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "480", ",", "193", ",", "985", ",", "124", ",",
              "645", ",", "172", ",", "896", ",", "290", ",", "732"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "981", ",", "1003", ",", "8", ",", "124", ",", 
             "645", ",", "126", ",", "417", ",", "985", ",", "734"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "193", ",", "645", ",", "8", ",", "243", ",", 
             "985", ",", "109", ",", "460", ",", "271", ",", "172"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"761", ",", "985", ",", "460", ",", "722", ",", "358", ",",
              "176", ",", "124", ",", "849", ",", "732", ",", "758"}], "}"}], 
         ",", 
         RowBox[{"{", 
           
           RowBox[{"124", ",", "359", ",", "417", ",", "732", ",", "109", ",",
              "453", ",", "593", ",", "985", ",", "645", ",", "389"}], 
           "}"}]}], "}"}], Short[#, 8]& ], "line" -> 11, "sessionID" -> 
   26824007231452460376, "byteCount" -> 82072, "size" -> 8, "stored" -> False,
    "expr" -> Missing["NotAvailable", "NewSessionID"], "wrap" -> 
   OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellLabel->"Out[11]=",ExpressionUUID->"3821f92d-6096-46ad-86ac-a8e5e21f2e89"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"m", ".", 
  RowBox[{"Transpose", "[", "m", "]"}]}]], "Input",ExpressionUUID->"b3b5844c-\
601a-4146-9709-7b3c4078fd6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ByteCount", "@", "m"}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"72e4d1bb-deff-4e6c-ac39-93fa7fabd695"],

Cell[BoxData["1107296424"], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"1a92d6a5-c1b9-499a-8fab-444694d0dd3e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 911},
WindowMargins->{{37, Automatic}, {Automatic, 56}},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 10, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0a50e24c-df9d-4bc6-844f-d9357c5c2900"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 190, 5, 45, "Input",ExpressionUUID->"89bcda9b-2730-4109-a749-4176f91f8294",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[769, 29, 88, 0, 66, "Section",ExpressionUUID->"7ab1eff3-434c-4783-a7db-0c12a26115b8"],
Cell[CellGroupData[{
Cell[882, 33, 112, 2, 53, "Subsection",ExpressionUUID->"a3596cef-c494-4575-a82d-ac4a520b086d",
 InitializationCell->True],
Cell[997, 37, 253, 6, 45, "Input",ExpressionUUID->"555a3be7-6006-4e97-8142-e2b9158ffea0",
 InitializationCell->True],
Cell[1253, 45, 520, 14, 65, "Input",ExpressionUUID->"67acdb23-2b8a-401b-ac0c-18b18d0829a3",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[1810, 64, 113, 2, 53, "Subsection",ExpressionUUID->"69bcd4c7-5c41-46ad-9456-c19e7370ec79",
 InitializationCell->True],
Cell[1926, 68, 1062, 23, 249, "Input",ExpressionUUID->"175c3f28-e36b-4c7c-93c8-713d86a3786e",
 InitializationCell->True],
Cell[2991, 93, 360, 8, 208, "Input",ExpressionUUID->"8ef1d8b6-8d95-40de-b561-982734641cfe",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3400, 107, 94, 0, 66, "Section",ExpressionUUID->"234e26c7-07cf-47f0-84a4-60ae854f1070"],
Cell[3497, 109, 605, 17, 65, "Input",ExpressionUUID->"c46390ed-50ce-4566-8bfe-169abb7e21b6",
 InitializationCell->True],
Cell[4105, 128, 389, 11, 65, "Input",ExpressionUUID->"e8a9f2ba-fc97-4c9a-abac-d21a3957b1eb",
 InitializationCell->True],
Cell[4497, 141, 794, 19, 208, "Input",ExpressionUUID->"ff3b83c6-9025-4e06-8803-4e97e43d7c63",
 InitializationCell->True],
Cell[5294, 162, 555, 14, 127, "Input",ExpressionUUID->"4e93ad8b-1ad6-44b5-b8ee-f9a879b87e2f",
 InitializationCell->True],
Cell[5852, 178, 591, 15, 167, "Input",ExpressionUUID->"1dda1534-9de9-40c2-94aa-42a674012671",
 InitializationCell->True],
Cell[6446, 195, 1362, 32, 290, "Input",ExpressionUUID->"6feaf024-f7bf-42ae-9fb6-6796de93de8c",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[7845, 232, 93, 0, 66, "Section",ExpressionUUID->"729c0de3-80af-4fa4-bb33-c225975f29fc"],
Cell[CellGroupData[{
Cell[7963, 236, 88, 0, 53, "Subsection",ExpressionUUID->"2add89f7-bbc4-49a4-8911-41a4eac5cdf0"],
Cell[8054, 238, 1031, 32, 90, "Input",ExpressionUUID->"a86a56d1-fa71-402f-8d1f-8890c91a71ef"],
Cell[CellGroupData[{
Cell[9110, 274, 444, 13, 49, "Input",ExpressionUUID->"18215c2f-e803-4850-a01b-9a2ade5ca606"],
Cell[9557, 289, 95, 0, 23, "EchoTiming",ExpressionUUID->"00860368-ebe9-4dd8-b03e-8e156f3a5e78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9689, 294, 257, 6, 29, "Input",ExpressionUUID->"53a0beab-f2a6-4ec3-bd35-fb4b21c7a2a5"],
Cell[9949, 302, 234240, 4281, 74, "Output",ExpressionUUID->"0a7edf2c-1758-4692-82f0-501a58247266"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244226, 4588, 465, 14, 49, "Input",ExpressionUUID->"b71d5c34-1165-4360-9efa-fccea16ec416"],
Cell[244694, 4604, 95, 0, 23, "EchoTiming",ExpressionUUID->"59743ffa-22b9-4f2d-8ee5-c0e6a291df89"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244826, 4609, 145, 3, 29, "Input",ExpressionUUID->"94841dbe-9622-470b-b93e-42d01fee24b8"],
Cell[244974, 4614, 171, 4, 33, "Output",ExpressionUUID->"58e9a84c-b12e-4f65-9989-24acfcc3e882"]
}, Open  ]],
Cell[245160, 4621, 885, 25, 90, "Input",ExpressionUUID->"65703484-e7be-4c0c-b37a-41e9e507b647"],
Cell[CellGroupData[{
Cell[246070, 4650, 197, 5, 29, "Input",ExpressionUUID->"8b52fe20-a5fa-482d-b791-28b544f0f664"],
Cell[246270, 4657, 111, 2, 33, "Output",ExpressionUUID->"7f03b85c-c69c-4ec2-82de-af7736a51835"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246418, 4664, 459, 14, 29, "Input",ExpressionUUID->"55ba090a-d5aa-4899-b5d5-f427e09c4785"],
Cell[246880, 4680, 95, 0, 23, "EchoTiming",ExpressionUUID->"97fc070d-8e22-4ad1-8377-afff5f0519ab"]
}, Open  ]],
Cell[246990, 4683, 81, 0, 33, "Text",ExpressionUUID->"fb0b9ca3-e41b-44cf-9ea3-6e359adcd85f"],
Cell[CellGroupData[{
Cell[247096, 4687, 687, 19, 49, "Input",ExpressionUUID->"4c234e50-91e1-4b4d-9254-a5b1bb595205"],
Cell[247786, 4708, 68266, 1173, 376, "Output",ExpressionUUID->"0a3eccda-760c-49ea-b16d-338f33339e6a"]
}, Open  ]],
Cell[316067, 5884, 440, 12, 29, "Input",ExpressionUUID->"6908309b-edcb-4f38-956d-348b1d668031"],
Cell[CellGroupData[{
Cell[316532, 5900, 468, 14, 29, "Input",ExpressionUUID->"6bbeb348-4588-4586-95ab-d050ec765692"],
Cell[317003, 5916, 130, 2, 33, "Output",ExpressionUUID->"0e4df56b-b42f-4237-9287-299625336dd7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[317194, 5925, 87, 0, 66, "Section",ExpressionUUID->"80d965c8-3a2b-4b2e-a146-bd657e165c20"],
Cell[317284, 5927, 258, 7, 45, "Input",ExpressionUUID->"42284bb8-aac4-4546-a89a-30c7576dd9c2",
 InitializationCell->True],
Cell[317545, 5936, 937, 28, 65, "Input",ExpressionUUID->"f2a4edc2-979d-4706-92e1-66f08d318264",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[318507, 5968, 335, 9, 29, "Input",ExpressionUUID->"a486785e-b688-4618-ab4c-ef5e91cc7968"],
Cell[318845, 5979, 95, 0, 23, "EchoTiming",ExpressionUUID->"9d940855-fb9e-42ba-a318-6f7e850d0fff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[318977, 5984, 339, 9, 29, "Input",ExpressionUUID->"ec3468f6-ba9e-414c-8306-144c71e513c9"],
Cell[319319, 5995, 95, 0, 23, "EchoTiming",ExpressionUUID->"fff12e4c-ab81-4d50-80a0-423ce6bb89a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319451, 6000, 308, 9, 29, "Input",ExpressionUUID->"58caee77-eb49-4f52-816b-c8f2adee50ae"],
Cell[319762, 6011, 94, 0, 23, "EchoTiming",ExpressionUUID->"c9b5f86f-7f0a-4b64-a332-dcd09df429cc"],
Cell[319859, 6013, 162, 4, 33, "Output",ExpressionUUID->"454db84e-dd89-45f4-83c3-89d785b86a42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320058, 6022, 411, 12, 29, "Input",ExpressionUUID->"3b8c0cca-3727-4ec0-b6e6-e1451d67e724"],
Cell[320472, 6036, 129, 2, 33, "Output",ExpressionUUID->"05350a3f-7406-4d2e-80e6-a96c9bc9ef7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320638, 6043, 257, 7, 29, "Input",ExpressionUUID->"29f9f595-e7d7-4be1-9f1c-a9d89a6d9746"],
Cell[320898, 6052, 174, 4, 33, "Output",ExpressionUUID->"2fb19600-9882-45b5-8c0a-a649be6f40ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[321109, 6061, 808, 24, 49, "Input",ExpressionUUID->"fb303f70-34f3-4037-8052-0c09209e6c90"],
Cell[321920, 6087, 97, 0, 23, "EchoTiming",ExpressionUUID->"bfb11642-e7e3-4f09-8db0-2bd5a8a16383"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322054, 6092, 189, 5, 29, "Input",ExpressionUUID->"31693922-e195-401c-8efe-50d2a2acd198"],
Cell[322246, 6099, 129, 2, 33, "Output",ExpressionUUID->"633d913b-8fd2-432f-ad23-4920adef7760"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322412, 6106, 689, 19, 49, "Input",ExpressionUUID->"26e9544f-afff-4ecb-8de3-eba77b485a64"],
Cell[323104, 6127, 73219, 1254, 376, "Output",ExpressionUUID->"83f5f4b8-6b90-451f-9c51-b4f78d1323e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396360, 7386, 368, 10, 29, "Input",ExpressionUUID->"10509343-cfc0-401e-9309-9497f599e87f"],
Cell[396731, 7398, 95, 0, 23, "EchoTiming",ExpressionUUID->"7af47416-7b04-4286-8191-ef92f06b7a8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396863, 7403, 144, 3, 29, "Input",ExpressionUUID->"aa37d754-0ad1-4b5b-ab2c-7c3dfcb8953b"],
Cell[397010, 7408, 173, 4, 33, "Output",ExpressionUUID->"2dfc5271-4ce4-43c5-b2fc-190a6a8aa40d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[397220, 7417, 163, 4, 29, "Input",ExpressionUUID->"b1e5adad-b7c3-4678-96bf-d03014fd05a6"],
Cell[397386, 7423, 118, 2, 33, "Output",ExpressionUUID->"676de4bf-ef59-4003-9afb-6e889b2e4dfc"]
}, Open  ]],
Cell[397519, 7428, 95, 0, 29, "Input",ExpressionUUID->"10fb935a-e509-4716-b4e4-11f5ea83464f"],
Cell[397617, 7430, 108, 1, 29, "Input",ExpressionUUID->"9656b456-8978-494b-8b5d-8e5d44afcb3a"],
Cell[CellGroupData[{
Cell[397750, 7435, 149, 3, 29, "Input",ExpressionUUID->"5d2a1dd3-29ac-4a10-a378-eb5ef714b07e"],
Cell[397902, 7440, 111, 2, 33, "Output",ExpressionUUID->"01385e3d-352f-4959-b82d-b0a438e28920"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398050, 7447, 240, 6, 29, "Input",ExpressionUUID->"ea5f00a0-ec38-4f4b-a609-a91722417719"],
Cell[398293, 7455, 7671, 160, 58, "Output",ExpressionUUID->"f306bfc8-f1fa-4963-83cb-8d136a108bcd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406001, 7620, 257, 8, 29, "Input",ExpressionUUID->"287775ad-7a12-472a-91d1-e6f9ffa3114a"],
Cell[406261, 7630, 96, 0, 23, "EchoTiming",ExpressionUUID->"9f72b3c5-8d4d-4499-9afd-4cf5744e5901"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406394, 7635, 147, 3, 29, "Input",ExpressionUUID->"a8f30331-b360-4957-8018-51288df8634d"],
Cell[406544, 7640, 171, 4, 33, "Output",ExpressionUUID->"5cd35cbf-d32b-4790-a2b1-c4c9850db68a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406752, 7649, 322, 9, 29, "Input",ExpressionUUID->"ed3c0ddf-984e-4ef2-a12b-5b6f5cbb2fc3"],
Cell[407077, 7660, 162, 4, 33, "Output",ExpressionUUID->"ac5dbf89-823a-478e-97c4-e4f0504d5c05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407276, 7669, 144, 3, 29, "Input",ExpressionUUID->"4df84543-8db8-46f5-972b-81bd57952cc6"],
Cell[407423, 7674, 173, 4, 33, "Output",ExpressionUUID->"ed8e9565-d8a2-4bac-ab02-82035673c119"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407633, 7683, 318, 9, 29, "Input",ExpressionUUID->"8c5572a9-0453-4737-82db-a3d4e3d0999c"],
Cell[407954, 7694, 214, 6, 33, "Output",ExpressionUUID->"e1ed97a9-97c9-40ca-a51a-fbe6d63f4f74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408205, 7705, 322, 9, 29, "Input",ExpressionUUID->"3a49d02a-1704-491f-a4ca-7499842fc571"],
Cell[408530, 7716, 162, 4, 33, "Output",ExpressionUUID->"a55c0af0-67d0-4ec1-ab6c-402c8f0a965c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408729, 7725, 473, 14, 29, "Input",ExpressionUUID->"dc676e3a-0ea5-483a-8071-c9011fdc1768"],
Cell[409205, 7741, 481, 9, 76, "Output",ExpressionUUID->"e72fce51-c1dd-4209-ba70-933c5b0ec466"]
}, Open  ]],
Cell[CellGroupData[{
Cell[409723, 7755, 334, 9, 49, "Input",ExpressionUUID->"4b88ae3a-bbcf-4de9-8740-a06c705789dd"],
Cell[410060, 7766, 95, 0, 23, "EchoTiming",ExpressionUUID->"03ca51b0-4999-4119-b9b2-816367966b22"],
Cell[410158, 7768, 120, 2, 33, "Output",ExpressionUUID->"6a4f1a6b-12e4-4fa7-86c3-166e8150c821"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[410327, 7776, 77, 0, 66, "Section",ExpressionUUID->"514c9271-9e47-4b99-b564-764a5de8203b"],
Cell[410407, 7778, 109, 1, 29, "Input",ExpressionUUID->"c94166e2-97ca-4677-a14d-e47cf0f3ca26"],
Cell[410519, 7781, 137, 2, 29, "Input",ExpressionUUID->"8072df8d-3e48-4638-a88c-174871718187"],
Cell[410659, 7785, 334, 10, 29, "Input",ExpressionUUID->"d42a4659-11b1-4d77-a760-d7d77947f5f7"],
Cell[CellGroupData[{
Cell[411018, 7799, 536, 15, 29, "Input",ExpressionUUID->"505f4e9f-e00f-405a-bcb2-d0f72dada540"],
Cell[411557, 7816, 95, 0, 23, "EchoTiming",ExpressionUUID->"ab0378c2-377d-4d28-a16f-062fbf61369a"],
Cell[411655, 7818, 167, 3, 33, "Output",ExpressionUUID->"815e50ba-8d74-4dbd-a2ef-e8ff89cf14b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[411859, 7826, 408, 12, 29, "Input",ExpressionUUID->"c4cdcb52-0594-4ec0-87a3-717687ddb529"],
Cell[412270, 7840, 3006, 69, 155, "Output",ExpressionUUID->"3821f92d-6096-46ad-86ac-a8e5e21f2e89"]
}, Open  ]],
Cell[415291, 7912, 142, 3, 29, "Input",ExpressionUUID->"b3b5844c-601a-4146-9709-7b3c4078fd6b"],
Cell[CellGroupData[{
Cell[415458, 7919, 135, 2, 29, "Input",ExpressionUUID->"72e4d1bb-deff-4e6c-ac39-93fa7fabd695"],
Cell[415596, 7923, 115, 1, 33, "Output",ExpressionUUID->"1a92d6a5-c1b9-499a-8fab-444694d0dd3e"]
}, Open  ]]
}, Open  ]]
}
]
*)

